//created on: Aug 21, 2012
package uk.ac.imperial.dws04.Presage2Experiments.IPCon

//list any import classes here.
//java
import java.lang.String
import java.lang.Number;
import java.lang.Integer
import java.lang.Double
import java.lang.Object
import java.lang.Math
import java.util.UUID
import java.util.LinkedList
//IPCon
import uk.ac.imperial.dws04.Presage2Experiments.IPCon.IPConProtocol.Role
//drls
import uk.ac.imperial.dws04.Presage2Experiments.IPCon.IPCon_Institutional_Facts.*
//import uk.ac.imperial.dws04.Presage2Experiments.IPCon.IPConPowPer.*

//declare any global variables here
global org.apache.log4j.Logger logger

// fact indicating that if the person about to sync says no, there should be a revision after
declare PossibleAddRevision
	value : Object
	revision : Integer
	issue : String
	cluster : UUID
end

// fact indicating that if someone leaves, there may need to be a revision after
declare PossibleRemRevision
	value : Object
	revision : Integer
	issue : String
	cluster : UUID
end

rule "holdsAt for possibleAddRevision"
	when
		Sync( $agent : agent, $value : value, $revision : revision, $issue : issue, $cluster : cluster )
		Chosen( revision==$revision, $ballot : ballot, value==$value, issue==$issue, cluster==$cluster )
		// get the highest vote for each acceptors, compare FOR votes and NOTFOR votes
		Integer( $forVotes : intValue ) from accumulate( 
								// find all the acceptors
								 $a : HasRole( role==Role.ACCEPTOR, revision==$revision, issue==$issue, cluster==$cluster ) and
								// that voted for the value
								$b : Voted( agent==$a.agent, revision==$revision, value==$value, issue==$issue, cluster==$cluster ) and
								// and didn't vote since the one you just got
								not Voted( agent==$a, revision==$revision, ballot>$b.ballot, issue==$issue, cluster==$cluster )
								, count( $b ) )
		Integer( $notForVotes : intValue ) from accumulate( 
								// find all the acceptors
								$a1 : HasRole( role==Role.ACCEPTOR, revision==$revision, issue==$issue, cluster==$cluster ) and
								// that voted against the value
								$b1 : Voted( agent==$a1.agent, revision==$revision, value!=$value, issue==$issue, cluster==$cluster ) and
								// and didn't vote since the one you just got
								not Voted( agent==$a1, revision==$revision, ballot>$b1.ballot, issue==$issue, cluster==$cluster )
								, count( $b1 ) )
		Integer( $didntVotes : intValue, $forVotes == $notForVotes+$didntVotes ) from accumulate(
								// find all the acceptors
								$a2 : HasRole( role==Role.ACCEPTOR, revision==$revision, issue==$issue, cluster==$cluster ) and
								// who didnt vote
								not Voted( agent==$a2.agent, revision==$revision, issue==$issue, cluster==$cluster )
								, count( $a2 ) )
		
	then
	logger.trace("possibleAddRevision fired");
		insertLogical( new PossibleAddRevision( $value, $revision, $issue, $cluster ) );
end


rule "holdsAt for possibleRemRevision"
	when
		// NOTE that this code is all reused from above except the following line...
		//Sync( $agent : agent, $value : value, $revision : revision, $issue : issue, $cluster : cluster )
		Chosen( $revision : revision, $ballot : ballot, $value : value, $issue : issue, $cluster : cluster )
		// get the highest vote for each acceptors, compare FOR votes and NOTFOR votes
		
		// find all acceptors
		$agents : LinkedList(size > 0) from accumulate(
								$a : HasRole( role==Role.ACCEPTOR, revision==$revision, issue==$issue, cluster==$cluster )
								, collectList( $a.getAgent() ) )
		
		Integer( $forVotes : intValue ) from accumulate( 
								// that voted for the value
								$b : Voted( agent memberOf $agents, revision==$revision, value==$value, issue==$issue, cluster==$cluster ) and
								// and didn't vote since the one you just got
								not Voted( agent memberOf $agents, revision==$revision, ballot>$b.ballot, issue==$issue, cluster==$cluster )
								, count( $b ) )
		Integer( $notForVotes : intValue ) from accumulate(
								// that voted against the value
								$b1 : Voted( agent memberOf $agents, revision==$revision, value!=$value, issue==$issue, cluster==$cluster ) and 
								// and didn't vote since the one you just got
								not Voted( agent memberOf $agents, revision==$revision, ballot>$b1.ballot, issue==$issue, cluster==$cluster )
								, count( $b1 ) ) and
		Integer( $didntVotes : intValue, $forVotes == $notForVotes+$didntVotes ) from accumulate(
								// find all the acceptors
								$a2 : HasRole( role==Role.ACCEPTOR, revision==$revision, issue==$issue, cluster==$cluster ) and
								// who didnt vote
								not Voted( agent==$a2.agent, revision==$revision, issue==$issue, cluster==$cluster )
								, count( $a2 ) )
	then
		logger.trace("possibleRemRevision fired");
		insertLogical( new PossibleRemRevision( $value, $revision, $issue, $cluster ) );
end


declare QuorumSize
	quorumSize : Integer
	revision : Integer
	issue : String
	cluster : UUID
end

rule "create new quorumsize fact"
	no-loop
	when
		HasRole( $revision : revision, $issue : issue, $cluster : cluster )
		not QuorumSize( revision==$revision, issue==$issue, cluster==$cluster )
		
	then
		insert( new QuorumSize( 0, $revision, $issue, $cluster ) );
end

rule "update quorumsize"
// FIXME TODO work out how to do this properly
	no-loop
	when
		$q : QuorumSize( $revision : revision, $issue : issue, $cluster : cluster )
		$acceptors : Number( ) from accumulate( 
								// find all the acceptors
								$a : HasRole( role==Role.ACCEPTOR, revision==$revision, issue==$issue, cluster==$cluster )
								, count( $a ) )
	then
		/* logger.trace("0");
		Integer acc = $acceptors.intValue();
		double half = acc/2; logger.trace("1");
		half = java.lang.Math.ceil( floor ); logger.trace("2");
		Double floor = (Double)half; logger.trace("3");
		Integer newQS = floor.intValue() + 1; logger.trace("4"); */
		modify($q) {
			//Integer newQS = ((Double)(java.lang.Math.ceil( $acceptors / 2 ) )).intValue();
			//setQuorumSize( newQS );
			setQuorumSize( ((Double)(java.lang.Math.floor( $acceptors.intValue() / 2 ) )).intValue()+1 );
		};
		logger.trace("Updating quorumsize: " + $q);
end


/*
query "quorumSize"( Integer $revision, String $issue, UUID $cluster)
	$acceptors : Integer( ) from accumulate( 
								// find all the acceptors
								$a : HasRole( role==Role.ACCEPTOR, revision==$revision, issue==$issue, cluster==$cluster )
								, count( $a ) )
end
*/