//created on: Aug 21, 2012
package uk.ac.imperial.dws04.Presage2Experiments.IPCon

//list any import classes here.
//java
import java.lang.String
import java.lang.Number;
import java.lang.Integer
import java.lang.Double
import java.lang.Object
import java.lang.Math
import java.util.UUID
import java.util.List
//IPCon
import uk.ac.imperial.dws04.Presage2Experiments.IPCon.Role
import uk.ac.imperial.dws04.Presage2Experiments.IPCon.facts.*
//drls
//import uk.ac.imperial.dws04.Presage2Experiments.IPCon.IPCon_Institutional_Facts.*
//import uk.ac.imperial.dws04.Presage2Experiments.IPCon.IPConPowPer.*

//declare any global variables here
global org.apache.log4j.Logger logger
global Object IPCNV_val

// fact indicating that if the person about to sync says no, there should be a revision after
declare PossibleAddRevision
	@role( event )
	@expires( 1s )
end

rule "holdsAt for possibleAddRevision - only an indication"
	when
		Sync( $agent : agent, $value : value, $revision : revision, $issue : issue, $cluster : cluster )
		Chosen( revision==$revision, $ballot : ballot, value==$value, issue==$issue, cluster==$cluster )
		// get the highest vote for each acceptors, compare FOR votes and NOTFOR votes
		
		// find all acceptors
		$agents : List(size > 0) from accumulate(
								$a : HasRole( role==Role.ACCEPTOR, revision==$revision, issue==$issue, cluster==$cluster )
								, collectList( $a.getAgent() ) )
		
		//Number( $forVotes : intValue ) from accumulate(
		$forVotes : List( ) from accumulate( 
								// that voted for the value
								$b : ReportedVote( $voteAgentFor: agent, $voteAgentFor memberOf $agents, voteRevision==$revision, voteValue==$value, issue==$issue, cluster==$cluster ) and
								// and didn't vote since the one you just got
								not ReportedVote( agent==$voteAgentFor, voteRevision==$revision, voteBallot>$b.voteBallot, issue==$issue, cluster==$cluster )
								//, count( $b ) )
								, collectList( $b ) )
		//Number( $notForVotes : intValue /*, $forVotes==$notForVotes */ ) from accumulate(
		$notForVotes : List( $forVotes.size() <= $notForVotes.size() ) from accumulate(
								// that voted against the value
								$b1 : ReportedVote( $voteAgentNot : agent, $voteAgentNot memberOf $agents, voteRevision==$revision, voteValue==IPCNV_val, issue==$issue, cluster==$cluster ) and 
								// and didn't vote since the one you just got
								not ReportedVote( agent==$voteAgentNot, voteRevision==$revision, voteBallot>$b1.voteBallot, issue==$issue, cluster==$cluster )
								//, count( $b1 ) ) //and
								, collectList( $b1 ) )
		//Number( $didntVotes : intValue /*, $forVotes <= $notForVotes+$didntVotes*/ ) from accumulate(
		/*
		$didntVotes : List( $forVotes.size() <= $notForVotes.size() + $didntVotes.size() ) from accumulate(
								// find all the acceptors
								$a2 : HasRole( role==Role.ACCEPTOR, revision==$revision, issue==$issue, cluster==$cluster ) and
								// who didnt vote
								not ReportedVote( agent==$a2.agent, voteRevision==$revision, issue==$issue, cluster==$cluster )
								//, count( $a2 ) )
								, collectList( $a2.getAgent() ) )
		*/
	then
		//logger.trace("Agents:" + $agents);
		//logger.trace("For:" + $forVotes + " / Against:" + $notForVotes /*+ " / Didn't:" + $didntVotes*/);
		//logger.trace("For:" + $forVotes.size() + " / Against:" + $notForVotes.size());
		// THIS IS NOW ACTUALLY DONE IN THE ACTION
		logger.trace("Inserting possibleAddRevision due to " + $agent + " syncing");
		insert( new PossibleAddRevision( $value, $revision, $issue, $cluster ) );
end

rule "holdsAt for possibleRemRevision"
// needs to happen after the obligation to revise check
agenda-group "PRR"
auto-focus true
	when
		// NOTE that this code is all reused from above except the following line missing and adding QS...
		//Sync( $agent : agent, $value : value, $revision : revision, $issue : issue, $cluster : cluster )
		Chosen( $revision : revision, $ballot : ballot, $value : value, $issue : issue, $cluster : cluster )
		$quorumSize : QuorumSize( revision==$revision, issue==$issue, cluster==$cluster )
		// get the highest vote for each acceptors, compare FOR votes and NOTFOR votes
		
		// find all acceptors
		$agents : List(size > 0) from accumulate(
								$a : HasRole( role==Role.ACCEPTOR, revision==$revision, issue==$issue, cluster==$cluster )
								, collectList( $a.getAgent() ) )
		
		//Number( $forVotes : intValue ) from accumulate(
		$forVotes : List( ) from accumulate( 
								// that voted for the value
								$b : ReportedVote( $voteAgentFor: agent, $voteAgentFor memberOf $agents, voteRevision==$revision, voteValue==$value, issue==$issue, cluster==$cluster ) and
								// and didn't vote since the one you just got
								not ReportedVote( agent==$voteAgentFor, voteRevision==$revision, voteBallot>$b.voteBallot, issue==$issue, cluster==$cluster )
								//, count( $b ) )
								, collectList( $b ) )
		//Number( $notForVotes : intValue /*, $forVotes==$notForVotes */ ) from accumulate(
		$notForVotes : List( $forVotes.size() <= $notForVotes.size(), $forVotes.size()<$quorumSize.getQuorumSize() ) from accumulate(
								// that voted against the value
								$b1 : ReportedVote( $voteAgentNot : agent, $voteAgentNot memberOf $agents, voteRevision==$revision, voteValue==IPCNV_val, issue==$issue, cluster==$cluster ) and 
								// and didn't vote since the one you just got
								not ReportedVote( agent==$voteAgentNot, voteRevision==$revision, voteBallot>$b1.voteBallot, issue==$issue, cluster==$cluster )
								//, count( $b1 ) ) //and
								, collectList( $b1 ) )
		//Number( $didntVotes : intValue /*, $forVotes <= $notForVotes+$didntVotes*/ ) from accumulate(
		/*
		$didntVotes : List( $forVotes.size() <= $notForVotes.size() + $didntVotes.size() ) from accumulate(
								// find all the acceptors
								$a2 : HasRole( role==Role.ACCEPTOR, revision==$revision, issue==$issue, cluster==$cluster ) and
								// who didnt vote
								not ReportedVote( agent==$a2.agent, voteRevision==$revision, issue==$issue, cluster==$cluster )
								//, count( $a2 ) )
								, collectList( $a2.getAgent() ) )
		*/
	then
		logger.trace("Agents:" + $agents);
		logger.trace("For:" + $forVotes + " / Against:" + $notForVotes /*+ " / Didn't:" + $didntVotes*/);
		logger.trace("Logically toggling possibleRemRevision");
		insertLogical( new PossibleRemRevision( $value, $revision, $issue, $cluster ) );
end

rule "create new quorumsize fact"
	no-loop
	when
		HasRole( $revision : revision, $issue : issue, $cluster : cluster )
		not QuorumSize( revision==$revision, issue==$issue, cluster==$cluster )
		
	then
		insert( new QuorumSize( 0, $revision, $issue, $cluster ) );
end

rule "update quorumsize"
salience 1 // needs to happen after sync response created but before obligation
// FIXME TODO work out how to do this properly
	no-loop
	when
		$q : QuorumSize( $revision : revision, $issue : issue, $cluster : cluster )
		$acceptors : List( size >0 ) from accumulate( 
								// find all the acceptors
								$a : HasRole( role==Role.ACCEPTOR, revision==$revision, issue==$issue, cluster==$cluster )
								, collectList( $a.getAgent() ) )
		$syncs : Number( ) from accumulate(
								// find all the agents being synched
								$b : Sync( agent memberOf $acceptors, revision==$revision, issue==$issue, cluster==$cluster )
								, count( $b ) )
		$needToSyncs : List( ) from accumulate(
								// find all the agents that need to be synched
								$c : NeedToSync( agent memberOf $acceptors, revision==$revision, issue==$issue, cluster==$cluster )
								, collectList( $c ) )
	then
		/*
		logger.trace("0");
		Integer acc = $acceptors.size();
		double half = acc/2; logger.trace("1");
		half = java.lang.Math.floor( half ); logger.trace("2");
		Double floor = (Double)half; logger.trace("3");
		Integer newQS = floor.intValue() + 1; logger.trace("4");
		Integer newQSadjusted = newQS - $syncs.size() - $needToSyncs.size(); logger.trace("5");
		*/
		//Integer syncSize = $syncs.intValue();
		//Integer needToSyncSize = $needToSyncs.size();
		logger.trace("Acceptors:" + $acceptors.size() + " / Syncs:" + $syncs + " / NeedToSyncs:" + $needToSyncs.size() );
		modify($q) {
			//setQuorumSize( newQSadjusted );
			setQuorumSize( ((Double)(java.lang.Math.floor( ( $acceptors.size()  - $syncs.intValue() - $needToSyncs.size() ) / 2 ) )).intValue()+1  );
		};
		logger.trace("Updating quorumsize: " + $q);
end


/*
query "quorumSize"( Integer $revision, String $issue, UUID $cluster)
	$acceptors : Integer( ) from accumulate( 
								// find all the acceptors
								$a : HasRole( role==Role.ACCEPTOR, revision==$revision, issue==$issue, cluster==$cluster )
								, count( $a ) )
end
*/