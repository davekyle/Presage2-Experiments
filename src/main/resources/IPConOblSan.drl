//created on: Aug 21, 2012
package uk.ac.imperial.dws04.Presage2Experiments.IPCon

//list any import classes here.
// java
import java.util.List
import java.lang.Math
import java.lang.Double
import java.lang.String
import java.lang.Integer
import java.lang.Object
import java.util.UUID

//other drls files
//import uk.ac.imperial.dws04.Presage2Experiments.IPCon.IPCon_Institutional_Facts.*
import uk.ac.imperial.dws04.Presage2Experiments.IPCon.IPConPowPer.*
import uk.ac.imperial.dws04.Presage2Experiments.IPCon.IPConUtils.*
import uk.ac.imperial.dws04.Presage2Experiments.IPCon.IPCon.*

// my presage2
import uk.ac.imperial.dws04.Presage2Experiments.IPCon.actions.*
import uk.ac.imperial.dws04.Presage2Experiments.IPCon.facts.*
import uk.ac.imperial.dws04.Presage2Experiments.IPCon.Role

//declare any global variables here
global org.apache.log4j.Logger logger
global Object IPCNV_val
global Integer IPCNV_bal

// obligation

declare Obligation
	agent : IPConAgent
	action : IPConAction
	agentNeutral : boolean
	role : Role
end


rule "Request0A as a question initiates obligation to prepare"
// FIXME TODO need to add a way for the asker to be informed of result (maybe in the java only?)
	when
		Request0A( $agent : agent, $revision : revision, $value : value, $value==null, $issue : issue, $cluster : cluster )
		Power( agent==$agent, $reqAct : action)
		Request0A( agent==$agent, revision==$revision, issue==$issue, cluster==$cluster ) from $reqAct
		
		// Must be created on the Request0A, even if no one has permission then
		//Permission( $leader : agent, $prepAct : action )
		//Prepare1A( agent==$leader, revision==$revision, issue==$issue, cluster==$cluster ) from $prepAct
		not Pre_Vote( revision==$revision, issue==$issue, cluster==$cluster )
	then
		Prepare1A $prepare = new Prepare1A( null, $revision, null, $issue, $cluster );
    	logger.trace("Null request inserted obligation to " + $prepare );
		insert( new Obligation( null, $prepare, true, Role.LEADER ) ); 
end


rule "holdsAt for obligation to prepare"
// if you have permission, a value has been proposed, and a pre_vote doesn't exist already
	when
		// This isn't bound to a specific action, so will kick in as soon as someone is able
		Permission( $agent : agent, $action : action )
		Prepare1A( agent==$agent, $revision : revision, $issue : issue, $cluster : cluster ) from $action
		Proposed( revision==$revision, issue==$issue, cluster==$cluster )
		not Pre_Vote( revision==$revision, issue==$issue, cluster==$cluster )
	then
    	//$ballot = Integer.NaN; // FIXME todo need to work out how to handle this...
    	Prepare1A $prepare = new Prepare1A( null, $revision, null, $issue, $cluster );
    	logger.trace("Logically toggling obligation to " + $prepare );
		insertLogical( new Obligation( null, $prepare, true, Role.LEADER ) ); 
end

rule "holdsAt for obligation to respond"
// if you haven't responded when you have permission to do so, and have voted, you must respond
// only obligated to report votes in same revision
// not obligated if a higher prevote exists (FIXME TODO maybe put this in the permission?)
// FIXME TODO possibly also send an indicator if you've responded higher to help the leader
	when
		Permission( $agent : agent, $action : action )
		Response1B( agent==$agent, $voteRevision : voteRevision, $voteBallot : voteBallot, $voteValue : voteValue, $revision : revision, $ballot : ballot, $issue : issue, $cluster : cluster, $revision==$voteRevision ) from $action
		not Pre_Vote( revision==$voteRevision, ballot>$ballot, issue==$issue, cluster==$cluster )
		Voted( agent==$agent, revision==$voteRevision, ballot==$voteBallot, value==$voteValue, issue==$issue, cluster==$cluster )
		not ReportedVote( agent==$agent, voteRevision==$voteRevision, voteBallot==$voteBallot, voteValue==$voteValue, revision==$revision, ballot==$ballot, issue==$issue, cluster==$cluster )
	then
		Response1B $response = new Response1B( $agent, $voteRevision, $voteBallot, $voteValue, $revision, $ballot, $issue, $cluster );
		logger.trace("Logically toggling obligation for " + $agent + "  to " + $response );
		insertLogical( new Obligation( $agent, $response, false, Role.ACCEPTOR ) );
end

/*
rule "holdsAt for obligation to respond if you haven't voted"
// if you haven't responded when you have permission to do so, and have not voted, you must respond saying so
// not obligated if a higher prevote exists (FIXME TODO maybe put this in the permission?)
	when
		Permission( $agent : agent, $action : action )
		Response1B( agent==$agent, $voteRevision : voteRevision, $voteBallot : voteBallot, $voteValue : voteValue, $revision : revision, $ballot : ballot, $issue : issue, $cluster : cluster, $revision==$voteRevision ) from $action
		not Pre_Vote( revision==$voteRevision, ballot>$ballot, issue==$issue, cluster==$cluster )
		not Voted( agent==$agent, revision==$revision, ballot<$ballot, issue==$issue, cluster==$cluster )
		not ReportedVote( agent==$agent, voteRevision==$voteRevision, voteBallot==$voteBallot, voteValue==$voteValue, revision==$revision, ballot==$ballot, issue==$issue, cluster==$cluster )
	then
		Response1B $response = new Response1B( $agent, $voteRevision, $voteBallot, $voteValue, $revision, $ballot, $issue, $cluster );
		logger.trace("Logically toggling obligation for " + $agent + "  to " + $response );
		insertLogical( new Obligation( $agent, $response, false, Role.ACCEPTOR ) );
end
*/

rule "holdsAt for obligation to submit"
// if you have permission (which is pretty explicitly done) and haven't yet, you must
	when
		// This isn't bound to a specific action, so will kick in as soon as someone is able
        Permission( $agent : agent, $action : action )
        Submit2A( agent==$agent, $revision : revision, $ballot : ballot, $value : value, $issue : issue, $cluster : cluster ) from $action
		not Open_Vote( revision==$revision, ballot==$ballot, value==$value, issue==$issue, cluster==$cluster )
	then
		Submit2A $submit = new Submit2A( null, $revision, $ballot, $value, $issue, $cluster );
		logger.trace("Logically toggling obligation for " + $agent + "  to " + $submit );
        insertLogical( new Obligation( null, $submit, true, Role.LEADER ) );
end

rule "initiates for obligation to revise when an acceptor leaves (due to remrole or leavecluster)"
// needs to happen before the holdsAt for PRR
agenda-group "PRR"
auto-focus true
lock-on-active true
no-loop
	when
		AgentLeft( $agent : agent, $revision : revision, $issue : issue, $cluster : cluster )
		ReportedVote( agent==$agent, voteRevision==$revision, $value : voteValue, revision==$revision, issue==$issue, cluster==$cluster )
		PossibleRemRevision( value==$value, revision==$revision, issue==$issue, cluster==$cluster )
		// This is bound to the AgentLeft, so is required even if someone isn't around
		//Permission( $leader : agent, $action : action )
		//Revise( agent==$leader, revision==$revision, issue==$issue, cluster==$cluster ) from $action
	then
		Revise $revise = new Revise( null, $revision, $issue, $cluster );
		logger.trace("AgentLeft inserted obligation for a leader  to " + $revise );
        insert( new Obligation( null, $revise, true, Role.LEADER ) ); 
end


/*
rule "initiates for obligation to revise on leaveCluster"
// if an agent leaves when they are an acceptor and voted and you have a permission to revise and there is a possRemRev
	when
		LeaveCluster( $agent : agent, $cluster : cluster )
		//FIXME TODO check that this will actually work as the role will be modified by the remrole...
		// it won't...
		HasRole( role==Role.ACCEPTOR, agent==$agent, $revision : revision, $issue : issue, cluster==$cluster )
		//RevisePer( $leader : agent, revision==$revision, issue==$issue, cluster==$cluster )
        Permission( $leader : agent, $action : action )
        Revise( agent==$leader, revision==$revision, issue==$issue, cluster==$cluster ) from $action
		PossibleRemRevision( $value : value, revision==$revision, issue==$issue, cluster==$cluster )
		ReportedVote( agent==$agent, voteRevision==$revision, voteValue==$value, revision==$revision, issue==$issue, cluster==$cluster )
	then
		Revise $revise = new Revise( $leader, $revision, $issue, $cluster );
		logger.trace("LeaveCluster inserted obligation for " + $leader + "  to " + $revise );
        insert( new Obligation( $leader, $revise ) ); 
end

 rule "initiates for obligation to revise on remRole"
// if an agent leaves when they are an acceptor and voted and you have a permission to revise and there is a possRemRev
	when
		RemRole( $leader : leader, $agent : agent, role==Role.ACCEPTOR, $revision : revision, $issue : issue, $cluster : cluster )
		//FIXME TODO check that this will actually work as the permission will be modified by the remrole...
		// FIXME TODO it doesn't :P Also should be pow...
		//RemRolePer( leader==$leader, agent==$agent, role==Role.ACCEPTOR, revision==$revision, issue==$issue, cluster==$cluster )
        Permission( agent==$leader, $action : action )
        RemRole( leader==$leader, agent==$agent, role==Role.ACCEPTOR, revision==$revision, issue==$issue, cluster==$cluster ) from $action
		//HasRole( role==Role.ACCEPTOR, agent==$agent, revision==$revision, issue==$issue, cluster==$cluster )
		//RevisePer( agent==$leader, revision==$revision, issue==$issue, cluster==$cluster )
        Permission( agent==$leader, $revAction : action )
        Revise( agent==$leader, revision==$revision, issue==$issue, cluster==$cluster ) from $revAction
		PossibleRemRevision( $value : value, revision==$revision, issue==$issue, cluster==$cluster )
		ReportedVote( agent==$agent, voteRevision==$revision, voteValue==$value, revision==$revision, issue==$issue, cluster==$cluster )
	then
		Revise $revise = new Revise( $leader, $revision, $issue, $cluster );
		logger.trace("RemRole inserted obligation for " + $leader + " to " + $revise );
        insert( new Obligation( $leader, $revise ) ); 
end
*/
/*
rule "revise terminates obligation to revise"
// TODO will this work ? :S If it does, how about more general Action terminates obligation to Action ?
	no-loop
	when
		$revise : Revise( $agent : agent, $revision : revision, $issue : issue, $cluster : cluster )
		$obl : Obligation( agent==$agent, action==$revise )
	then
		logger.trace("Revise retracted obligation for " + $agent + " to " + $revise );
        retract( $obl );
end*/

rule "holdsAt for obligation to syncReq"
// if you have permission, you must syncReq (syncreqper covers all the other requirements)
	when
		// This isn't bound to a specific action, so will kick in as soon as someone is able
        Permission( $leader : agent, $action : action )
        SyncReq( leader==$leader, $agent : agent, $value : value, $revision : revision, $issue : issue, $cluster : cluster ) from $action
	then
		SyncReq $syncReq = new SyncReq( null, $agent, $value, $revision, $issue, $cluster );
		logger.trace("Logically toggling obligation for a leader to " + $syncReq );
        insertLogical( new Obligation( null, $syncReq, true, Role.LEADER ) );
end

rule "syncAck no initiates obligation to revise"
salience 0 // needs to happen after sync reponse and QS update
// if syncAck is no and agent had power to say so and leader has permission to revise and possibleAddRevision, leader must revise
	when
		// This is bound to the SyncNo, so must be inserted immediately
		SyncNo( $agent : agent, $revision : revision, $issue : issue, $cluster : cluster )
        // test
        $quorumSize : QuorumSize( revision==$revision, issue==$issue, cluster==$cluster )
        Chosen( revision==$revision, $ballot : ballot, $value : value, issue==$issue, cluster==$cluster )
		// get the highest vote for each acceptors, compare FOR votes and NOTFOR votes
		
		// find all acceptors
		$agents : List(size > 0) from accumulate(
								$a : HasRole( role==Role.ACCEPTOR, revision==$revision, issue==$issue, cluster==$cluster )
								, collectList( $a.getAgent() ) )
		
		//Number( $forVotes : intValue ) from accumulate(
		$forVotes : List( ) from accumulate( 
								// that voted for the value
								$b : ReportedVote( $voteAgentFor: agent, $voteAgentFor memberOf $agents, voteRevision==$revision, voteValue==$value, issue==$issue, cluster==$cluster ) and
								// and didn't vote since the one you just got
								not ReportedVote( agent==$voteAgentFor, voteRevision==$revision, voteBallot>$b.voteBallot, issue==$issue, cluster==$cluster )
								//, count( $b ) )
								, collectList( $b ) )
		//Number( $notForVotes : intValue /*, $forVotes==$notForVotes */ ) from accumulate(
		$notForVotes : List( $forVotes.size() < $notForVotes.size(), $forVotes.size()<$quorumSize.getQuorumSize() ) from accumulate(
								// that voted against the value
								$b1 : ReportedVote( $voteAgentNot : agent, $voteAgentNot memberOf $agents, voteRevision==$revision, voteValue==IPCNV_val, issue==$issue, cluster==$cluster ) and 
								// and didn't vote since the one you just got
								not ReportedVote( agent==$voteAgentNot, voteRevision==$revision, voteBallot>$b1.voteBallot, issue==$issue, cluster==$cluster )
								//, count( $b1 ) ) //and
								, collectList( $b1 ) )
        // /test
        //Permission( $leader : agent, $actionPer : action )
		//$rev : Revise( agent==$leader, revision==$revision, issue==$issue, cluster==$cluster ) from $actionPer
		//PossibleAddRevision( /*value!=$answer,*/ revision==$revision, issue==$issue, cluster==$cluster )
		//not Obligation( agent==$leader, action==$rev )
	then
		Revise $revise = new Revise( null, $revision, $issue, $cluster );
		logger.trace("Agents:" + $agents);
		logger.trace("For:" + $forVotes + " / Against:" + $notForVotes);
		logger.trace("For:" + $forVotes.size() + " / Against:" + $notForVotes.size());
		logger.trace("SyncAck inserted obligation for a leader to " + $revise );
        insert( new Obligation( null, $revise, true, Role.LEADER ) ); 
end

rule "holdsAt for obligation to syncack"
// if you can, you must
	when
        Permission( $agent : agent, $action : action )
        SyncAck( agent==$agent, $revision : revision, $issue : issue, $cluster : cluster ) from $action
		Sync( agent==$agent, revision==$revision, issue==$issue, cluster==$cluster )
	then
		SyncAck $syncAck = new SyncAck( $agent, null, $revision, $issue, $cluster );
		logger.trace("Sync logically toggling obligation for " + $agent + " to " + $syncAck );
        insertLogical( new Obligation( $agent, $syncAck, false, Role.ACCEPTOR ) );
end
/*
rule "Generic agent-relative obligation retraction"
	when
		$agent : IPConAgent( )
		$action : IPConAction( )
		$obl : Obligation( agent==$agent, action==$action ) 
	then
		logger.trace($action + " retracted agent-relative obligation: " + $obl);
		retract( $obl );
end	 

rule "Generic agent-neutral obligation retraction"
	when
		$agent : IPConAgent( )
		$action : IPConAction( )
		HasRole( $role : role, agent==$agent )
		$obl : Obligation( agent==null, action==$action, agentNeutral==true, role==$role ) 
	then
		logger.trace($action + " retracted agent-neutral obligation: " + $obl);
		retract( $obl );
end	 	 
*/
rule "Generic joint obligation retraction"
	when
		$agent : IPConAgent( )
		$action : IPConAction( )
		HasRole( agent==$agent, $role : role )
		$obl : Obligation( ( (agent==$agent) || (agent==null && agentNeutral==true && role==$role) ), $action.fulfils(action) ) 
	then
		logger.trace($action + " retracted obligation: " + $obl);
		retract( $obl );
end	 

query "getObligations" (IPConAgent $agent)HasRole( agent==$agent, $role : role)
	$obligation : Obligation( ( (agent==$agent) || (agent==null && agentNeutral==true && role==$role) ), $action : action )
end

// DO NOT USE WITH EMPTY ACTIONNAME !
query "getObligationsActions"( IPConAgent $agent, String $actionName )
	HasRole( agent==$agent, $role : role)
	$obligation : Obligation( ( (agent==$agent) || (agent==null && agentNeutral==true && role==$role) ), $action : action, ($action.toString()).substring(0,$actionName.length()).equals($actionName) )
end
