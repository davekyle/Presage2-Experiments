//created on: Aug 21, 2012
package uk.ac.imperial.dws04.Presage2Experiments.IPCon

//list any import classes here.
// java
import java.util.List
import java.lang.Math
import java.lang.Double
import java.lang.String
import java.lang.Integer
import java.lang.Object
import java.util.UUID

//other drls files
import uk.ac.imperial.dws04.Presage2Experiments.IPCon.IPCon_Institutional_Facts.*
import uk.ac.imperial.dws04.Presage2Experiments.IPCon.IPConPowPer.*
import uk.ac.imperial.dws04.Presage2Experiments.IPCon.IPConUtils.*

// my presage2
import uk.ac.imperial.dws04.Presage2Experiments.IPCon.actions.*
import uk.ac.imperial.dws04.Presage2Experiments.IPCon.IPConProtocol.Role

//declare any global variables here
global org.apache.log4j.Logger logger


rule "holdsAt for obligation to prepare"
// if you have permission, a value has been proposed, and a pre_vote doesn't exist already
    when
        PreparePer( $agent : agent, $revision : revision, $issue : issue, $cluster : cluster )
        Proposed( revision==$revision, issue==$issue, cluster==$cluster )
        not Pre_Vote( revision==$revision, issue==$issue, cluster==$cluster )
    then
    	//$ballot = Integer.NaN; // FIXME todo need to work out how to handle this...
    	Prepare1A $prepare = new Prepare1A( $agent, $revision, null, $issue, $cluster );
    	logger.trace("Logically toggling obligation to " + $prepare );
        insertLogical( new Obligation( $agent, $prepare ) ); 
end

rule "holdsAt for obligation to respond"
// if you haven't responded when you have permission to do so, and have voted, you must respond
// FIXME TODO possibly also send an indicator if you've responded higher to help the leader
	when
		ResponsePer( $agent : agent, $voteRevision : voteRevision, $voteBallot : voteBallot, $voteValue : voteValue, $revision : revision, $ballot : ballot, $issue : issue, $cluster : cluster )
		Voted( agent==$agent, revision==$voteRevision, ballot==$voteBallot, value==$voteValue, issue==$issue, cluster==$cluster )
		not ReportedVote( agent==$agent, revision==$voteRevision, ballot==$voteBallot, voteValue==$voteValue, revision==$revision, ballot==$ballot, issue==$issue, cluster==$cluster )
	then
		Response1B $response = new Response1B( $agent, $voteRevision, $voteBallot, $voteValue, $revision, $ballot, $issue, $cluster );
		logger.trace("Logically toggling obligation for " + $agent + "  to " + $response );
        insertLogical( new Obligation( $agent, $response ) );
end

rule "holdsAt for obligation to submit"
// if you have permission (which is pretty explicitly done) and haven't yet, you must
	when
		SubmitPer( $agent : agent, $revision : revision, $ballot : ballot, $value : value, $issue : issue, $cluster : cluster )
		not Open_Vote( revision==$revision, ballot==$ballot, value==$value, issue==$issue, cluster==$cluster )
	then
		Submit2A $submit = new Submit2A( $agent, $revision, $ballot, $value, $issue, $cluster );
		logger.trace("Logically toggling obligation for " + $agent + "  to " + $submit );
        insertLogical( new Obligation( $agent, $submit ) );
end

rule "initiates for obligation to revise on leaveCluster"
// if an agent leaves when they are an acceptor and voted and you have a permission to revise and there is a possRemRev
	when
		LeaveCluster( $agent : agent, $cluster : cluster )
		//FIXME TODO check that this will actually work as the role will be modified by the remrole...
		HasRole( role==Role.ACCEPTOR, agent==$agent, $revision : revision, $issue : issue, cluster==$cluster )
		RevisePer( $leader : agent, revision==$revision, issue==$issue, cluster==$cluster )
		PossibleRemRevision( $value : value, revision==$revision, issue==$issue, cluster==$cluster )
		ReportedVote( agent==$agent, voteRevision==$revision, voteValue==$value, revision==$revision, issue==$issue, cluster==$cluster )
	then
		Revise $revise = new Revise( $leader, $revision, $issue, $cluster );
		logger.trace("LeaveCluster inserted obligation for " + $leader + "  to " + $revise );
        insert( new Obligation( $leader, $revise ) ); 
end

 rule "initiates for obligation to revise on remRole"
// if an agent leaves when they are an acceptor and voted and you have a permission to revise and there is a possRemRev
	when
		RemRole( $leader : leader, $agent : agent, role==Role.ACCEPTOR, $revision : revision, $issue : issue, $cluster : cluster )
		//FIXME TODO check that this will actually work as the permission will be modified by the remrole...
		RemRolePer( leader==$leader, agent==$agent, role==Role.ACCEPTOR, revision==$revision, issue==$issue, cluster==$cluster )
		//HasRole( role==Role.ACCEPTOR, agent==$agent, revision==$revision, issue==$issue, cluster==$cluster )
		RevisePer( agent==$leader, revision==$revision, issue==$issue, cluster==$cluster )
		PossibleRemRevision( $value : value, revision==$revision, issue==$issue, cluster==$cluster )
		ReportedVote( agent==$agent, voteRevision==$revision, voteValue==$value, revision==$revision, issue==$issue, cluster==$cluster )
	then
		Revise $revise = new Revise( $leader, $revision, $issue, $cluster );
		logger.trace("RemRole inserted obligation for " + $leader + " to " + $revise );
        insert( new Obligation( $leader, $revise ) ); 
end

rule "revise terminates obligation to revise"
// TODO will this work ? :S If it does, how about more general Action terminates obligation to Action ?
	no-loop
	when
		$revise : Revise( $agent : agent, $revision : oldRevision, $issue : issue, $cluster : cluster )
		$obl : Obligation( agent==$agent, action==$revise )
	then
		logger.trace("Revise retracted obligation for " + $agent + " to " + $revise );
        retract( $obl );
end

rule "holdsAt for obligation to syncReq"
// if you have permission, you must syncReq (syncreqper covers all the other requirements)
	when
		SyncReqPer( $leader : leader, $agent : agent, $value : value, $revision : revision, $issue : issue, $cluster : cluster )
	then
		SyncReq $syncReq = new SyncReq( $leader, $agent, $value, $revision, $issue, $cluster );
		logger.trace("Logically toggling obligation for " + $leader + " to " + $syncReq );
        insertLogical( new Obligation( $leader, $syncReq ) );
end

rule "syncAck no initiates obligation to revise"
// if syncAck is no and agent had power to say so and leader has permission to revise and possibleAddRevision, leader must revise
	when
		//$answer==null 
		SyncAckPow( $agent : agent, $answer : value, $revision : revision, $issue : issue, $cluster : cluster )
		SyncAck( agent==$agent, value==$answer, value==null, revision==$revision, issue==$issue, cluster==$cluster )
		RevisePer( $leader : agent, revision==$revision, issue==$issue, cluster==$cluster )
		PossibleAddRevision( /*value!=$answer,*/ revision==$revision, issue==$issue, cluster==$cluster )
	then
		Revise $revise = new Revise( $leader, $revision, $issue, $cluster );
		logger.trace("SyncAck inserted obligation for " + $leader + " to " + $revise );
        insert( new Obligation( $leader, $revise ) ); 
end

rule "holdsAt for obligation to syncack"
// if you can, you must
	when
		// FIXME TODO left out value since it can be one of 2 (the correct one, or null)
		SyncAckPer( $agent : agent, $revision : revision, $issue : issue, $cluster : cluster )
		Sync( agent==$agent, revision==$revision, issue==$issue, cluster==$cluster )
	then
		//$answer = Integer.NaN; //FIXME TODO need to work out how to handle this...
		SyncAck $syncAck = new SyncAck( $agent, "PLACEHOLDER", $revision, $issue, $cluster );
		logger.trace("Sync logically toggling obligation for " + $agent + " to " + $syncAck );
        insertLogical( new Obligation( $agent, $syncAck ) );
end

rule "Generic obligation retraction"
	when
		$agent : IPConAgent( )
		$action : IPConAction( )
		$obl : Obligation( agent==$agent, action==$action ) 
	then
		logger.trace("Retracted obligation: " + $obl);
		retract( $obl );
end
