//created on: Aug 20, 2012
package uk.ac.imperial.dws04.Presage2Experiments.IPCon

//list any import classes here.
//java
import java.lang.String
import java.lang.Integer
import java.util.UUID
import java.lang.Object
//presage2
import uk.ac.imperial.presage2.core.network.NetworkAddress

//declare any global variables here
global org.apache.log4j.Logger logger

// power to make a request0a action
declare RequestPow
	agent : NetworkAddress
	revision : Integer
	issue : String
	cluster : UUID
end

// permission to make a request0a action
declare RequestPer
	agent : NetworkAddress
	revision : Integer
	issue : String
	cluster : UUID
end

// power to make a prepare1a action
declare PreparePow
	agent : NetworkAddress
	revision : Integer
	ballot : Integer
	issue : String
	cluster : UUID
end

// permission to make a prepare1a action
declare PreparePer
	agent : NetworkAddress
	revision : Integer
	ballot : Integer
	issue : String
	cluster : UUID
end

// power to make a response1b action
declare ResponsePow
	agent : NetworkAddress
	voteRevision : Integer
	voteBallot : Integer
	voteValue : Object
	revision : Integer
	ballot : Integer
	issue : String
	cluster : UUID 
end

// permission to make a response1b action
declare ResponsePer
	agent : NetworkAddress
	voteRevision : Integer
	voteBallot : Integer
	voteValue : Object
	revision : Integer
	ballot : Integer
	issue : String
	cluster : UUID 
end

// power to make a submit2a action
declare SubmitPow
	agent : NetworkAddress
	revision : Integer
	ballot : Integer
	value : Object
	issue : String
	cluster : UUID
end

// permission to make a submit2a action
declare SubmitPer
	agent : NetworkAddress
	revision : Integer
	ballot : Integer
	value : Object
	issue : String
	cluster : UUID
end

// permission to make an arrogate action
declare ArrogatePer
	agent : NetworkAddress
	revision : Integer
	issue : String
	cluster : UUID
end	

// power to make a resign action
declare ResignPow
	agent : NetworkAddress
	revision : Integer
	issue : String
	cluster : UUID
end	

// power to leave the cluster
declare LeavePow
	agent : NetworkAddress
	cluster : UUID

rule "holdsAt for power to request0a"
	when
		HasRole( role==Role.ACCEPTOR, $agent : agent, $revision : revision, $issue : issue, $cluster : cluster )
	then
		insertLogical( new RequestPow( $agent, $revision, $issue, $cluster ) );
end

rule "holdsAt for permission to request0a"
	when
		RequestPow( $agent : agent, $revision : revision, $issue : issue, $cluster : cluster )
	then
		insertLogical( new RequestPer(  $agent, $revision, $issue, $cluster ) );
end

rule "holdsAt for power to prepare1a"
	when
		HasRole( role==Role.LEADER, $agent : agent, $revision : revision, $ballot : ballot, $issue : issue, $cluster : cluster )
	then
		insertLogical( new PreparePow( $agent, $revision, $ballot, $issue, $cluster ) );
end

rule "holdsAt for permission to prepare1a"
	when
		PreparePow( $agent : agent, $revision : revision, $ballot : ballot, $issue : issue, $cluster : cluster )
	then
		insertLogical( new PreparePow( $agent, $revision, $ballot, $issue, $cluster ) );
end

rule "holdsAt for power to reponse1b"
	when
		HasRole( role==Role.ACCEPTOR, $agent : agent, $revision : revision, $ballot : ballot, $issue : issue, $cluster : cluster )
		Pre_Vote( revision==$revision, ballot==$ballot, issue==$issue, cluster==$cluster )
	then
		insertLogical( new ResponsePow( $agent, $voteRevision, $voteBallot, $voteValue, $revision, $ballot, $issue, $cluster );
end

rule "holdsAt for permission to response1b (if voted)"
	when
		ResponsePow( $agent : agent, $voteRevision : voteRevision, $voteBallot : voteBallot, $voteValue : voteValue, $revision : revision, $ballot : ballot, $issue : issue, $cluster : cluster )
		Voted( agent==$agent, voteRevision==$voteRevision, voteBallot==$voteBallot, voteValue==$voteValue, issue==$issue, cluster==$cluster )
		//$voteBallot < $ballot
		//$voteRevision <= $revision
	then
		insertLogical( new ResponsePer( $agent, $voteRevision, $voteBallot, $voteValue, $revision, $ballot, $issue, $cluster );
end

rule "holdsAt for permission to response1b (with indicators if didn't vote in this revision)"
	when
		ResponsePow( $agent : agent, voteRevision==$revision, voteBallot==0, voteValue==null, $revision : revision, $ballot : ballot, $issue : issue, $cluster : cluster )
		not Voted( agent==$agent, voteRevision==$revision, issue==$issue, cluster==$cluster )
	then
		insertLogical( new ResponsePer( $agent, $revision, 0, null, $revision, $ballot, $issue, $cluster );
end

rule "holdsAt for power to submit2a"
	when
		HasRole( role==Role.LEADER, $agent : agent, $revision : revision, $issue : issue, $cluster : cluster )
		Pre_Vote( revision==$revision, ballot==$ballot, issue==$issue, cluster==$cluster )
	then
		insertLogical( new SubmitPow( $agent, $revision, $ballot, $value, $issue, $cluster ) );
end

rule "holdsAt for permission to submit2a"
	when
		SubmitPow( $agent : agent, $revision : revision, $ballot : ballot, $value : value, $issue : issue, $cluster : cluster )
		// FIXME TODO calculate safety ?
	then
		insertLogical( new SubmitPer( $agent, $revision, $ballot, $value, $issue, $cluster ) );
end

rule "holdsAt for power to vote"
	when
		HasRole( role==Role.ACCEPTOR, $agent : agent, $revision : revision, $ballot : ballot, $issue : issue, $cluster : cluster )
		Open_Vote( revision==$revision, ballot==$ballot, value==$value, issue==$issue, cluster==$cluster )
	then
		insertLogical( new VotePow( $agent, $revision, $ballot, $value, $issue, $cluster ) );
end

rule "holdsAt for permission to vote"
	when
		VotePow( $agent : agent, $revision : revision, $ballot : ballot, $value : value, $issue : issue, $cluster : cluster )
		// didn't vote in a higher ballot in this revision
		not Voted( agent==$agent, revision==$revision, ballot>=$ballot, issue==$issue, cluster==$cluster )
		// didn't vote in a higher revision
		not Voted( agent==$agent, revision>$revision, issue==$issue, cluster==$cluster )
	then
		insertLogical( new VotePer( $agent, $revision, $ballot, $value, $issue, $cluster ) );
end

rule "holdsAt for permission to arrogate"
	when
		not HasRole( role==Role.LEADER, $agent : agent, $revision : revision, $issue : issue, $cluster : cluster )
	then
		insertLogical( new ArrogatePer( $agent, $revision, $issue, $cluster ) );
end

rule "holdsAt for power to resign"
	when
		HasRole( role==Role.LEADER, $agent : agent, $revision : revision, $issue : issue, $cluster : cluster )
	then
		insertLogical( new ResignPow( $agent, $revision, $issue, $cluster ) );
end

rule "holdsAt for power to leave"
	when
		HasRole( $agent : agent, $cluster : cluster )
	then
		insertLogical( new LeavePow( $agent, $cluster ) );
end