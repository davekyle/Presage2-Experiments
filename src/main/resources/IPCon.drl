//created on: Aug 20, 2012
package uk.ac.imperial.dws04.Presage2Experiments.IPCon

//list any import classes here.
// java
import java.util.List
import java.lang.Math
import java.lang.Double
import java.lang.String
import java.lang.Integer
import java.lang.Object
import java.util.UUID

//other drls files
//import uk.ac.imperial.dws04.Presage2Experiments.IPCon.IPCon_Institutional_Facts.*
import uk.ac.imperial.dws04.Presage2Experiments.IPCon.IPConPowPer.*
import uk.ac.imperial.dws04.Presage2Experiments.IPCon.IPConUtils.*

// my presage2
import uk.ac.imperial.dws04.Presage2Experiments.IPCon.actions.*
import uk.ac.imperial.dws04.Presage2Experiments.IPCon.IPConProtocol.Role
import uk.ac.imperial.dws04.Presage2Experiments.IPCon.facts.*

//declare any global variables here
global org.apache.log4j.Logger logger
global Object IPCNV_val

// drls stuff here - 1s expiry makes them last 1 cycle

declare IPConRIC
end

declare Request0A
	@role( event )
end

declare Prepare1A
	@role( event )
end

declare Response1B
	@role( event )
end

declare Submit2A
	@role( event )
end

declare Vote2B
	@role( event )
end

declare AddRole
	@role( event )
	@expires( 1s )
end

declare ArrogateLeadership
	@role( event )
	@expires( 1s )
end

declare LeaveCluster
	@role( event )
	@expires( 1s )
end

declare RemRole
	@role( event )
	@expires( 1s )
end

declare ResignLeadership
	@role( event )
	@expires( 1s )
end

declare Revise
	@role( event )
	@expires( 1s )
end

declare SyncAck
	@role( event )
	@expires( 1s )
end

declare SyncReq
	@role( event )
	@expires( 1s )
end

// internal flag event for an empowered no syncAck
declare SyncNo
	@role( event )
	// expires instantly; we only want to use it in the same cycle
	@expires( 0s )
	agent : IPConAgent
	revision : Integer
	ballot : Integer
	issue : String
	cluster : UUID
end

// internal flag event for an acceptor leaving
declare AgentLeft
	@role( event )
	// expires instantly; we only want to use it in the same cycle
	@expires( 0s )
	agent : IPConAgent
	revision : Integer
	issue : String
	cluster : UUID
end
	

rule "Request0A initiates Proposed"
    when
		Request0A( $agent : agent, $revision : revision, $value : value, $issue : issue, $cluster : cluster )
		//RequestPow( agent==$agent, revision==$revision, issue==$issue, cluster==$cluster )
		Power( agent==$agent, $action : action)
		Request0A( agent==$agent, revision==$revision, issue==$issue, cluster==$cluster ) from $action
    then
		logger.trace("Request0A inserted Proposed( " + $revision + " , " + $value + " , " + $issue + " , " + $cluster + " )");
		insert( new Proposed( $revision, $value, $issue, $cluster ) );
end

// See IPConOblSan for obligation to prepare on null request

rule "Prepare1A initiate Pre_Vote"
    when
		Prepare1A( $agent : agent, $revision : revision, $ballot : ballot, $issue : issue, $cluster : cluster )
		//pow if role of leader, per if pow
		//PreparePow( agent==$agent, revision==$revision, issue==$issue, cluster==$cluster )
		Power( agent==$agent, $action : action )
		Prepare1A( agent==$agent, revision==$revision, issue==$issue, cluster==$cluster ) from $action
    then
		logger.trace("Prepare1A inserted Pre_Vote( " + $revision + " , " + $ballot + " , " + $issue + " , " + $cluster + " )");
		insert( new Pre_Vote( $revision, $ballot, $issue, $cluster ) );
end

rule "Prepare1A terminates previous Pre_Votes on same issue (previous revision)"
	when
		Prepare1A( $agent : agent, $revision : revision, $ballot : ballot, $issue : issue, $cluster : cluster )
		$pv : Pre_Vote( revision<$revision, issue==$issue, cluster==$cluster )
		//pow if role of leader, per if pow
		//PreparePow( agent==$agent, revision==$revision, issue==$issue, cluster==$cluster )
		Power( agent==$agent, $action : action )
		Prepare1A( agent==$agent, revision==$revision, issue==$issue, cluster==$cluster ) from $action
    then
		logger.trace("Prepare1A retracted prevote on previous revision : " + $pv);
		retract( $pv );
end

rule "Prepare1A terminates previous Pre_Votes on same issue (same revision, previous ballot)"
	when
		Prepare1A( $agent : agent, $revision : revision, $ballot : ballot, $issue : issue, $cluster : cluster )
		$pv : Pre_Vote( revision==$revision, ballot<$ballot, issue==$issue, cluster==$cluster )
		//pow if role of leader, per if pow
		//PreparePow( agent==$agent, revision==$revision, issue==$issue, cluster==$cluster )
		Power( agent==$agent, $action : action )
		Prepare1A( agent==$agent, revision==$revision, issue==$issue, cluster==$cluster ) from $action
    then
    	logger.trace("Prepare1A retracted prevote on previous ballot : " + $pv);
        retract( $pv );
end

rule "Response1B initiates Reported_Vote"
	when
		Response1B( $agent : agent, $voteRevision : voteRevision, $voteBallot : voteBallot, $voteValue : voteValue, $revision : revision, $ballot : ballot, $issue : issue, $cluster : cluster )
		//ResponsePow( agent==$agent, revision==$revision, ballot==$ballot, issue==$issue, cluster==$cluster )
		Power( agent==$agent, $action : action )
		Response1B( agent==$agent, revision==$revision, ballot==$ballot, issue==$issue, cluster==$cluster ) from $action
	then
		logger.trace("Response1B inserted ReportedVote( " + $agent + " , " + $voteRevision + " , " + $voteBallot + " , " + $voteValue + " , " + $revision + " , " + $ballot + " , " + $issue + " , " + $cluster + " )");
		insert( new ReportedVote( $agent, $voteRevision, $voteBallot, $voteValue, $revision, $ballot, $issue, $cluster ) );
end

rule "Submit2A initiates Open_Vote"
	when
		Submit2A( $agent : agent, $revision : revision, $ballot : ballot, $value : value, $issue : issue, $cluster : cluster )
		//SubmitPow( agent==$agent, revision==$revision, ballot==$ballot, issue==$issue, cluster==$cluster )
		Power( agent==$agent, $action : action )
		Submit2A( agent==$agent, revision==$revision, ballot==$ballot, issue==$issue, cluster==$cluster ) from $action
	then
		logger.trace("Submit2A inserted OpenVote( " + $revision + " , " + $ballot + " , " + $value + " , " + $issue + " , " + $cluster + " )");
		insert( new Open_Vote( $revision, $ballot, $value, $issue, $cluster ) );
end

/* // shouldn't do this...
rule "Submit2A terminates Pre_Vote"
	// low salience to allow Pow(Submit) to fire first
	salience -1
	when
		Submit2A( $agent : agent, $revision : revision, $ballot : ballot, $value : value, $issue : issue, $cluster : cluster )
		//SubmitPow( agent==$agent, revision==$revision, ballot==$ballot, issue==$issue, cluster==$cluster )
		Power( agent==$agent, $action : action )
		Submit2A( agent==$agent, revision==$revision, ballot==$ballot, issue==$issue, cluster==$cluster ) from $action
		$pv : Pre_Vote( revision==$revision, ballot<=$ballot, issue==$issue, cluster==$cluster )
	then
		logger.trace("Submit2A retracted Pre_Vote : " + $pv );
		retract( $pv );
end
*/

rule "Vote initiates Voted and ReportedVote"
	when
		Vote2B( $agent : agent, $revision : revision, $ballot : ballot, $value : value, $issue : issue, $cluster : cluster )
		//VotePow( agent==$agent, revision==$revision, ballot==$ballot, value==$value, issue==$issue, cluster==$cluster )
		Power( agent==$agent, $action : action ) 
		Vote2B( agent==$agent, revision==$revision, ballot==$ballot, value==$value, issue==$issue, cluster==$cluster ) from $action
		// don't duplicate
		not Voted( agent==$agent, revision==$revision, ballot==$ballot, value==$value, issue==$issue, cluster==$cluster )
		not ReportedVote( agent==$agent, voteRevision==$revision, voteBallot==$ballot, voteValue==$value, revision==$revision, ballot==$ballot, issue==$issue, cluster==$cluster )
	then
		logger.trace("Vote inserted ReportedVote( " + $agent + " , " + $revision + " , " + $ballot + " , " + $value + " , " + $revision + " , " + $ballot + " , " + $issue + " , " + $cluster + " ) and " + 
			" Voted( " + $agent + " , " + $revision + " , " + $ballot + " , " + $value + " , " + $issue + " , " + $cluster + " )");
		insert( new Voted( $agent, $revision, $ballot, $value, $issue, $cluster ) );
		insert( new ReportedVote( $agent, $revision, $ballot, $value, $revision, $ballot, $issue, $cluster ) );
end

rule "holdsAt for Chosen"
	no-loop
	when
		Open_Vote( $revision : revision, $ballot : ballot, $value : value, $issue : issue, $cluster : cluster )
		// prevent multiples  
		not Chosen( revision==$revision, issue==$issue, cluster==$cluster )
		QuorumSize( $quorumSize : quorumSize, revision==$revision, issue==$issue, cluster==$cluster )
		// if number of reportedVotes that arent out of date and are for the value are >= quorumSize, then chosen 
		$reportedVotes : List(size >= $quorumSize) from accumulate (
				$rVote : ReportedVote( $a : agent, voteRevision==$revision, voteBallot<=$ballot, voteValue==$value, revision==$revision, ballot==$ballot, issue==$issue, cluster==$cluster ) and
				not ReportedVote( agent==$a, voteRevision>$revision, issue==$issue, cluster==$cluster ) and
				not ReportedVote( agent==$a, voteRevision==$revision, voteBallot>$ballot, issue==$issue, cluster==$cluster )
				, collectList( $rVote ) ) 
	then
		logger.trace("Inserting Chosen( " + $revision + " , " + $ballot + " , " + $value + " , " + $issue + " , " + $cluster + " )");
		insert( new Chosen( $revision, $ballot, $value, $issue, $cluster ) );
end
		

rule "Arrogate initiates IsLeader"
	when
		ArrogateLeadership( $agent : agent, $revision : revision, $issue : issue, $cluster : cluster )
		//ArrogatePow( agent==$agent )
		Power( agent==$agent, $action : action)
		ArrogateLeadership( agent==$agent ) from $action
	then
		logger.trace("Arrogate inserted HasRole( LEADER " + $agent + " , " + $revision + " , " + $issue + " , " + $cluster + " )");
		insert( new HasRole( Role.LEADER, $agent, $revision, $issue, $cluster ) );
end

rule "Arrogate creates new RIC"
// "not exists()" doesn't work for some reason...
	when
		ArrogateLeadership( $agent : agent, $revision : revision, $issue : issue, $cluster : cluster )
		not IPConRIC( revision==$revision, issue==$issue, cluster==$cluster ) 
		//ArrogatePow( agent==$agent )
		Power( agent==$agent, $action : action)
		ArrogateLeadership( agent==$agent ) from $action
	then
		logger.trace("Arrogate inserted new RIC: " + $revision + " , " + $issue + " , " + $cluster);
		insert( new IPConRIC( $revision, $issue, $cluster ) );
end

rule "Resign terminates IsLeader"
	when
		ResignLeadership( $agent : agent, $revision : revision, $issue : issue, $cluster : cluster )
		//ResignPow( agent==$agent, revision==$revision, issue==$issue, cluster==$cluster )
		Power( agent==$agent, $action : action )
		ResignLeadership( agent==$agent, revision==$revision, issue==$issue, cluster==$cluster ) from $action
		$role : HasRole( role==Role.LEADER, agent==$agent, revision==$revision, issue==$issue, cluster==$cluster )
	then
		logger.trace("Resign retracted role : " + $role );
		retract( $role );
end

rule "LeaveCluster terminates all roles, syncs, needtosyncs and reported votes"
	agenda-group "exit"
	auto-focus true
	//lock-on-active true
	no-loop
	when
		LeaveCluster( $agent : agent, $cluster : cluster )
		//LeavePow( agent==$agent, cluster==$cluster )
		
		Power( agent==$agent, $action : action )
		LeaveCluster( agent==$agent, cluster==$cluster ) from $action
		$roles : List( ) from accumulate ( 
					$role: HasRole( agent==$agent, cluster==$cluster )
					, collectList( $role ) )
		$syncs : List( ) from accumulate ( 
					$sync: Sync( agent==$agent, cluster==$cluster )
					, collectList( $sync ) )
		$reportedVotes : List( ) from accumulate ( 
					$rVote : ReportedVote( agent==$agent, cluster==$cluster )
					, collectList( $rVote ) )
		$needToSyncs : List( ) from accumulate ( 
					$n2Sync : NeedToSync( agent==$agent, cluster==$cluster )
					, collectList( $n2Sync ) )
	then
		logger.trace("LeaveCluster inserted AgentLeft(s) and retracted lots from agent " + $agent + " ... ");
		logger.trace("Roles: " + $roles);
		logger.trace("Syncs: " + $syncs);
		logger.trace("rVotes: " + $reportedVotes);
		logger.trace("n2Syncs: " + $needToSyncs);
		if ($roles.size()!=0) {
		// switch to an Object[] from the unmodifiable list...
			for (Object role : $roles.toArray()) {
				logger.trace(" ... " + role );
				insert( new AgentLeft( $agent, ((HasRole)role).getRevision(), ((HasRole)role).getIssue(), ((HasRole)role).getCluster() ) );
				retract( role );
			}
		}
		if ($syncs.size()!=0) {
			for (Object sync : $syncs.toArray()) {
				logger.trace(" ... " + sync );
				retract( sync );
			}
		}
		if ($reportedVotes.size()!=0) {
			for (Object rVote : $reportedVotes.toArray()) {
				logger.trace(" ... " + rVote );
				retract( rVote );
			}
		}
		if ($needToSyncs.size()!=0) {
			for (Object n2Sync : $needToSyncs.toArray()) {
				logger.trace(" ... " + n2Sync );
				retract( n2Sync );
			}
		}
		// FIXME what about Voted facts - they affect Chosen, but not possRemRev ? 
end

rule "AddRole initiates role"
	when
		AddRole( $leader : leader, $agent : agent, $role : role, $revision : revision, $issue : issue, $cluster : cluster )
		//AddRolePow( leader==$leader, agent==$agent, role==$role, revision==$revision, issue==$issue, cluster==$cluster )
		Power( agent==$leader, $action : action )
		AddRole( leader==$leader, agent==$agent, role==$role, revision==$revision, issue==$issue, cluster==$cluster ) from $action
	then
		logger.trace("AddRole inserted HasRole(  " + $role + " , " + $agent + " , " + $revision + " , " + $issue + " , " + $cluster + " )"); 
		insert( new HasRole( $role, $agent, $revision, $issue, $cluster ) );
end

rule "AddRole initiates NeedToSync"
	when
		AddRole( $leader : leader, $agent : agent, $role : role, $revision : revision, $issue : issue, $cluster : cluster )
		//AddRolePow( leader==$leader, agent==$agent, role==$role, revision==$revision, issue==$issue, cluster==$cluster )
		Power( agent==$leader, $action : action )
		AddRole( leader==$leader, agent==$agent, role==$role, revision==$revision, issue==$issue, cluster==$cluster ) from $action
		Chosen( revision==$revision, $ballot : ballot, $value : value, issue==$issue, cluster==$cluster )
	then
		logger.trace("AddRole inserted NeedToSync(  " + $agent + " , " + $value + " , " + $revision + " , " + $issue + " , " + $cluster + " )"); 
		insert( new NeedToSync( $agent, $value, $revision, $issue, $cluster ) );
end

rule "RemRole terminates role"
	agenda-group "exit"
	auto-focus true
	when
		RemRole( $leader : leader, $agent : agent, $role : role, $revision : revision, $issue : issue, $cluster : cluster )
		//RemRolePow( leader==$leader, agent==$agent, role==$role, revision==$revision, issue==$issue, cluster==$cluster )
		Power( agent==$leader, $action : action )
		RemRole( leader==$leader, agent==$agent, role==$role, revision==$revision, issue==$issue, cluster==$cluster ) from $action
		$roleToRem : HasRole( role==$role, agent==$agent, revision==$revision, issue==$issue, cluster==$cluster )
	then
		logger.trace("RemRole retracted Role : " + $roleToRem );
		retract( $roleToRem );
end

rule "RemRole initiates AgentLeft flag fact"
	when
		RemRole( $leader : leader, $agent : agent, $role : role, $role==Role.ACCEPTOR, $revision : revision, $issue : issue, $cluster : cluster )
		//RemRolePow( leader==$leader, agent==$agent, role==$role, revision==$revision, issue==$issue, cluster==$cluster )
		Power( agent==$leader, $action : action )
		RemRole( leader==$leader, agent==$agent, role==$role, revision==$revision, issue==$issue, cluster==$cluster ) from $action
	then
		logger.trace("RemRole inserted AgentLeft: " + $agent + " , " + $revision + " , " + $issue + " , " + $cluster );
		insert( new AgentLeft( $agent, $revision, $issue, $cluster ) );
end

rule "Revise initiates new RIC"
	when
		Revise( $agent : agent, $revision : revision, $issue : issue, $cluster : cluster )
		Power( agent==$agent, $action : action )
		Revise( agent==$agent, revision==$revision, issue==$issue, cluster==$cluster) from $action
	then
		Integer $newRevision = ($revision+1);
		logger.trace("Revise inserted new RIC: " + $newRevision + " , " + $issue + " , " + $cluster);
		insert( new IPConRIC( $newRevision, $issue, $cluster ) );
end

rule "Revise updates roles for new revision"
	when
		Revise( $leader : agent, $revision : revision, $issue : issue, $cluster : cluster )
		Power( agent==$leader, $action : action )
		Revise( agent==$leader, revision==$revision, issue==$issue, cluster==$cluster) from $action
		HasRole( $role : role, $agent : agent, revision==$revision, issue==$issue, cluster==$cluster )
	then
		Integer $newRevision = $revision+1;
		logger.trace("Revise inserted role: " + $role + " , " + $agent + " , " + $newRevision + " , " + $issue + " , " + $cluster);
		insert( new HasRole( $role, $agent, $newRevision, $issue, $cluster ) ); 
end

rule "Revise terminates all syncs"
	when
		Revise( $agent : agent, $revision : revision, $issue : issue, $cluster : cluster )
		Power( agent==$agent, $action : action )
		Revise( agent==$agent, revision==$revision, issue==$issue, cluster==$cluster) from $action
		$x : Sync( revision==$revision, issue==$issue, cluster==$cluster )
	then
		logger.trace("Revise retracted Sync : " + $x );
		retract( $x );
end

rule "Revise terminates all needtosyncs"
	when
		Revise( $agent : agent, $revision : revision, $issue : issue, $cluster : cluster )
		Power( agent==$agent, $action : action )
		Revise( agent==$agent, revision==$revision, issue==$issue, cluster==$cluster) from $action
		$x : NeedToSync( revision==$revision, issue==$issue, cluster==$cluster )
	then
		logger.trace("Revise retracted NeedToSync : " + $x );
		retract( $x );
end

rule "SyncReq initiates Sync"
	when
		SyncReq( $leader : leader, $agent : agent, $value : value, $revision : revision, $issue : issue, $cluster : cluster )
		//SyncReqPow( leader==$leader, revision==$revision, issue==$issue, cluster==$cluster )
		Power( agent==$leader, $action : action )
		SyncReq( leader==$leader, revision==$revision, issue==$issue, cluster==$cluster ) from $action
		$needToSync : NeedToSync( agent==$agent, revision==$revision, issue==$issue, cluster==$cluster )
		not Sync( agent==$agent, revision==$revision, issue==$issue, cluster==$cluster )
	then
		logger.trace("Trying to Sync with agent:" + $agent + ", value:" + $value + ", revision:" + $revision + ", issue:" + $issue + ", cluster:" + $cluster );
		insert( new Sync( $agent, $value, $revision, $issue, $cluster ) );
		logger.trace("SyncReq inserted Sync( " + $agent + " , " + $revision + " , " + $issue + " , " + $cluster + " )...");
		// retract NeedtoSync indicator
		retract( $needToSync );
		logger.trace("...  and retracted NeedToSync : " + $needToSync);
end

rule "SyncAck initiates Voted and ReportedVote (if agree)"
salience 2
	when
		SyncAck( $agent : agent, $answer : value, $revision : revision, $issue : issue, $cluster : cluster )
		$sync : Sync(agent==$agent, revision==$revision, issue==$issue, cluster==$cluster )
		//SyncAckPow( agent==$agent, value==$answer, revision==$revision, issue==$issue, cluster==$cluster )
		Power( agent==$agent, $action : action )
		SyncAck( agent==$agent, value==$answer, revision==$revision, issue==$issue, cluster==$cluster ) from $action
		Chosen( revision==$revision, $ballot : ballot, value==$answer, issue==$issue, cluster==$cluster )
	then
		logger.trace("SyncAck yes inserted Voted( " + $agent + " , " + $revision + " , " + $ballot + " , " + $answer + " , " + $issue + " , " + $cluster + " ) and " +
		 " ReportedVote( " + $agent + " , " + $revision + " , " + $ballot + " , " + $answer + " , " + $revision + " , " + $ballot + " , " + $issue + " , " + $cluster + " )");
		insert( new Voted( $agent, $revision, $ballot, $answer, $issue, $cluster ) );
		insert( new ReportedVote( $agent, $revision, $ballot, $answer, $revision, $ballot, $issue, $cluster ) );
		retract( $sync ); 
		logger.trace("...  and retracted Sync : " + $sync);
end

rule "SyncAck initiates null ReportedVote (if not agree)"
salience 2 // needs to happen before QS update and before obligation to revise
	// doesn't initiate null Voted because that doesn't make sense
	// this might not be needed, depending on implementation of Submit & Response...
	when
		//$answer : null
		SyncAck( $agent : agent, $answer : value, $answer==IPCNV_val, $revision : revision, $issue : issue, $cluster : cluster )
		$sync : Sync(agent==$agent, revision==$revision, issue==$issue, cluster==$cluster )
		//SyncAckPow( agent==$agent, value==$answer, revision==$revision, issue==$issue, cluster==$cluster )
		Power( agent==$agent, $action : action )
		SyncAck( agent==$agent, value==$answer, revision==$revision, issue==$issue, cluster==$cluster ) from $action
		Chosen( revision==$revision, $ballot : ballot, issue==$issue, cluster==$cluster )
		not SyncNo( agent==$agent, revision==$revision, issue==$issue, cluster==$cluster )
	then
		logger.trace("SyncAck no inserted ReportedVote( " + $agent + " , " + $revision + " , 0 , " + $answer + " , " + $revision + " , " + $ballot + " , " + $issue + " , " + $cluster + " )");
		insert( new ReportedVote( $agent, $revision, 0, IPCNV.val(), $revision, $ballot, $issue, $cluster ) );
		// insert a flag event since we can't use SyncAck and Pow(SyncAck) to calc obl to revise...
		insert( new SyncNo( $agent, $revision, $ballot, $issue, $cluster ) );
		retract( $sync ); 
		logger.trace("...  and retracted Sync : " + $sync);
end

/*rule "SyncAck terminates Sync"
	when
		SyncAck( $agent : agent, $revision : revision, $issue : issue, $cluster : cluster )
		$sync : Sync( agent==$agent, revision==$revision, issue==$issue, cluster==$cluster )
	then
		retract( $sync );
		logger.trace("SyncAck retracted Sync : " + $sync );
end*/


query "getFacts" ( Integer $revision, String $issue, UUID $cluster )
	$fact : IPConFact( revision==$revision, issue==$issue, cluster==$cluster )
end

// DO NOT USE WITH EMPTY FACTNAME
query "getFactsNamed" ( Integer $revision, String $issue, UUID $cluster, String $factName )
	$fact : IPConFact( revision==$revision, issue==$issue, cluster==$cluster, (($fact.toString()).substring(0, $factName.length())).equals($factName) ) 
end






