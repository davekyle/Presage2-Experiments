//created on: Aug 20, 2012
package uk.ac.imperial.dws04.Presage2Experiments.IPCon

//list any import classes here.
// java
import java.util.List
import java.lang.Math
import java.lang.Double
import java.lang.String
import java.lang.Integer
import java.lang.Object
import java.util.UUID

//other drls files
import uk.ac.imperial.dws04.Presage2Experiments.IPCon.IPCon_Institutional_Facts
import uk.ac.imperial.dws04.Presage2Experiments.IPCon.IPConPowPer

// my presage2
import uk.ac.imperial.dws04.Presage2Experiments.IPCon.actions.*
import uk.ac.imperial.dws04.Presage2Experiments.IPCon.IPConProtocol.Role

//presage2
import uk.ac.imperial.presage2.core.network.NetworkAddress

//declare any global variables here
global org.apache.log4j.Logger logger

// drls stuff here

declare Request0A
	@role( event )
end

declare Prepare1A
	@role( event )
end

declare Response1B
	@role( event )
end

declare Submit2A
	@role( event )
end

rule "Request0A initiates Proposed"

    when
        Request0A( $agent : agent, $revision : revision, $value : value, $issue : issue, $cluster : cluster )
        RequestPow( agent==$agent, revision==$revision, issue==$issue, cluster==$cluster )
        //RequestPer( agent==$agent, revision==$revision, issue==$issue, cluster==$cluster )
    then
        insert( new Proposed( $revision, $value, $issue, $cluster ) );
end

rule "Prepare1A initiate Pre_Vote"
    //include attributes such as "salience" here...
    when
        Prepare1A( $agent : agent, $revision : revision, $ballot : ballot, $issue : issue, $cluster : cluster )
        //pow if role of leader, per if pow
        PreparePow( agent==$agent, revision==$revision, issue==$issue, cluster==$cluster )
        //PreparePer( agent==$agent, revision==$revision, issue==$issue, cluster==$cluster )
    then
        insert( new Pre_Vote( $revision, $ballot, $issue, $cluster ) );

end

rule "Prepare1A terminates previous Pre_Votes on same issue (previous revision)"
	when
		Prepare1A( $agent : agent, $revision : revision, $ballot : ballot, $issue : issue, $cluster : cluster )
        $pv = Pre_Vote( revision<$revision, issue==$issue, cluster==$cluster )
        //pow if role of leader, per if pow
        PreparePow( agent==$agent, revision==$revision, ballot==$ballot, issue==$issue, cluster==$cluster )
        //PreparePer( agent==$agent, revision==$revision, ballot==$ballot, issue==$issue, cluster==$cluster )
    then
        retract( $pv );
end

rule "Prepare1A terminates previous Pre_Votes on same issue (same revision, previous ballot)"
	when
		Prepare1A( $agent : agent, $revision : revision, $ballot : ballot, $issue : issue, $cluster : cluster )
        $pv = Pre_Vote( revision==$revision, ballot<$ballot, issue==$issue, cluster==$cluster )
        //pow if role of leader, per if pow
        PreparePow( agent==$agent, revision==$revision, ballot==$ballot, issue==$issue, cluster==$cluster )
        //PreparePer( agent==$agent, revision==$revision, ballot==$ballot, issue==$issue, cluster==$cluster )
    then
        retract( $pv );
end

rule "Response1B initiates Reported_Vote"
	when
		Response1B( $agent : agent, $voteRevision : voteRevision, $voteBallot : voteBallot, $voteValue : voteValue, $revision : revision, $ballot : ballot, $issue : issue, $cluster : cluster )
		ResponsePow( agent==$agent, voteRevision=$voteRevision, voteBallot==$voteBallot, voteValue==$voteValue, revision==$revision, ballot==$ballot, issue==$issue, cluster==$cluster
	then
		insert( new Reported_Vote( $agent, $voteRevision, $voteBallot, $voteValue, $revision, $ballot, $issue, $cluster ) );
end

rule "Submit2A initiates Open_Vote"
	when
		Submit2A( $agent : agent, $revision : revision, $ballot : ballot, $value : value, $issue : issue, $cluster : cluster )
		SubmitPow( agent==$agent, revision==$revision, ballot==$ballot, value==$value, issue==$issue, cluster==$cluster )
	then
		insert( new Open_Vote( $revision, $ballot, $value, $issue, $cluster ) );
end

rule "Vote initiates Voted and ReportedVote"
	when
		Vote2B( $agent : agent, $revision : revision, $ballot : ballot, $value : value, $issue : issue, $cluster : cluster )
		VotePow( agent==$agent, revision==$revision, ballot==$ballot, value==$value, issue==$issue, cluster==$cluster ) 
	then
		insert( new Voted( $agent, $revision, $ballot, $value, $issue, $cluster ) );
		insert( new ReportedVote( $agent, $revision, $ballot, $value, $revision, $ballot, $issue, $cluster ) );
end

rule "Arrogate initiates IsLeader"
	when
		ArrogateLeadership( $agent : agent, $revision : revision, $issue : issue, $cluster : cluster )
		ArrogatePer( agent==$agent, revision==$revision, issue==$issue, cluster==$cluster )
	then
		insert( new HasRole( role==Role.LEADER, $agent, $revision, $issue, $cluster ) );
end

rule "Resign terminates IsLeader"
	when
		ResignLeadership( $agent : agent, $revision : revision, $issue : issue, $cluster : cluster )
		ResignPow( agent==$agent, revision==$revision, issue==$issue, cluster==$cluster )
		$role : HasRole( role==Role.LEADER, agent==$agent, revision==$revision, issue==$issue, cluster==$cluster )
	then
		retract( $role );
end

rule "LeaveCluster terminates all roles, syncs and reported votes"
	when
		LeaveCluster( $agent : agent, $cluster : cluster )
		LeavePow( agent==$agent, cluster==$cluster )
		$roles : HasRole( agent==$agent, cluster==$cluster )
		$syncs : Sync( agent==$agent, cluster==$cluster )
		$reportedVotes : ReportedVote( agent==$agent, cluster==$cluster )
	then
		retract( $roles );
		retract( $syncs );
		retract( $reportedVotes );
		// FIXME what about Voted's ?
end

rule "AddRole initiates role"
	when
		AddRole( $leader : leader, $agent : agent, $role : role, $revision : revision, $issue : issue, $cluster : cluster )
		AddRolePow( leader==$leader, agent==$agent, role==$role, revision==$revision, issue==$issue, cluster==$cluster )
	then
		insert( new HasRole( $role, $agent, $revision, $issue, $cluster ) );
end

rule "RemRole terminates role"
	when
		RemRole( $leader : leader, $agent : agent, $role : role, $revision : revision, $issue : issue, $cluster : cluster )
		RemRolePow( leader==$leader, agent==$agent, role==$role, revision==$revision, issue==$issue, cluster==$cluster )
		$role : HasRole( role==$role, agent==$agent, revision==$revision, issue==$issue, cluster==$cluster )
	then
		retract( $role );
end

rule "Revise terminates all syncs"
	when
		Revise( $agent : agent, $revision : revision, $issue : issue, $cluster : cluster )
		$x : Sync( agent==$agent, revision==$revision, issue==$issue, cluster==$cluster )
	then
		retract( $x );
end

rule "SyncReq initiates Sync"
	when
		SyncReq( $leader : leader, $agent : agent, $value : value, $revision : revision, $issue : issue, $cluster : cluster )
		SyncReqPow( leader==$leader, revision==$revision, issue==$issue, cluster==$cluster )
	then
		insert( new Sync( agent==$agent, value==$value, revision==$revision, issue==$issue, cluster==$cluster ) );
end

rule "SyncAck initiates Voted and ReportedVote (if agree)"
	when
		SyncAck( $agent : agent, $answer : value, $revision : revision, $issue : issue, $cluster : cluster )
		SyncAckPow( agent==$agent, value==$answer, revision==$revision, issue==$issue, cluster==$cluster )
		Chosen( revision==$revision, $ballot : ballot, value==$answer, issue==$issue, cluster==$cluster )
	then
		insert( new Voted( $agent, $revision, $ballot, $answer, $issue, $cluster ) );
		insert( new ReportedVote( $agent, $revision, $ballot, $answer, $revision, $ballot, $issue, $cluster ) ); 
end

rule "SyncAck initiates null ReportedVote (if not agree)"
	// doesn't initiate null Voted because that doesn't make sense
	// this might not be needed, depending on implementation of Submit & Response...
	when
		$answer : null
		SyncAck( $agent : agent, value==$answer, $revision : revision, $issue : issue, $cluster : cluster )
		SyncAckPow( agent==$agent, value==$answer, revision==$revision, issue==$issue, cluster==$cluster )
		Chosen( revision==$revision, issue==$issue, cluster==$cluster )
	then
		insert( new ReportedVote( $agent, $revision, 0, $answer, $revision, $ballot, $issue, $cluster ) );
end












