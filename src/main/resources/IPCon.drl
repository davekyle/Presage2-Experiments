//created on: Aug 20, 2012
package uk.ac.imperial.dws04.Presage2Experiments.IPCon

//list any import classes here.
// java
import java.util.List
import java.lang.Math
import java.lang.Double
import java.lang.String
import java.lang.Integer
import java.lang.Object
import java.util.UUID

//other drls files
import uk.ac.imperial.dws04.Presage2Experiments.IPCon.IPCon_Institutional_Facts.*
import uk.ac.imperial.dws04.Presage2Experiments.IPCon.IPConPowPer.*
import uk.ac.imperial.dws04.Presage2Experiments.IPCon.IPConUtils.*

// my presage2
import uk.ac.imperial.dws04.Presage2Experiments.IPCon.actions.*
import uk.ac.imperial.dws04.Presage2Experiments.IPCon.IPConProtocol.Role

//declare any global variables here
global org.apache.log4j.Logger logger

// drls stuff here - 1s expiry makes them last 1 cycle

declare Request0A
	@role( event )
end

declare Prepare1A
	@role( event )
end

declare Response1B
	@role( event )
end

declare Submit2A
	@role( event )
end

declare Vote2B
	@role( event )
end

declare AddRole
	@role( event )
	@expires( 1s )
end

declare ArrogateLeadership
	@role( event )
	@expires( 1s )
end

declare LeaveCluster
	@role( event )
	@expires( 1s )
end

declare RemRole
	@role( event )
	@expires( 1s )
end

declare ResignLeadership
	@role( event )
	@expires( 1s )
end

declare Revise
	@role( event )
	@expires( 1s )
end

declare SyncAck
	@role( event )
	@expires( 1s )
end

declare SyncReq
	@role( event )
	@expires( 1s )
end
	

rule "Request0A initiates Proposed"

    when
        Request0A( $agent : agent, $revision : revision, $value : value, $issue : issue, $cluster : cluster )
        RequestPow( agent==$agent, revision==$revision, issue==$issue, cluster==$cluster )
        //RequestPer( agent==$agent, revision==$revision, issue==$issue, cluster==$cluster )
    then
    	logger.trace("Request0A inserted Proposed( " + $revision + " , " + $value + " , " + $issue + " , " + $cluster + " )");
        insert( new Proposed( $revision, $value, $issue, $cluster ) );
end

rule "Prepare1A initiate Pre_Vote"
    //include attributes such as "salience" here...
    when
        Prepare1A( $agent : agent, $revision : revision, $ballot : ballot, $issue : issue, $cluster : cluster )
        //pow if role of leader, per if pow
        PreparePow( agent==$agent, revision==$revision, issue==$issue, cluster==$cluster )
        //PreparePer( agent==$agent, revision==$revision, issue==$issue, cluster==$cluster )
    then
    	logger.trace("Prepare1A inserted Pre_Vote( " + $revision + " , " + $ballot + " , " + $issue + " , " + $cluster + " )");
        insert( new Pre_Vote( $revision, $ballot, $issue, $cluster ) );

end

rule "Prepare1A terminates previous Pre_Votes on same issue (previous revision)"
	when
		Prepare1A( $agent : agent, $revision : revision, $ballot : ballot, $issue : issue, $cluster : cluster )
        $pv : Pre_Vote( revision<$revision, issue==$issue, cluster==$cluster )
        //pow if role of leader, per if pow
        PreparePow( agent==$agent, revision==$revision, issue==$issue, cluster==$cluster )
        //PreparePer( agent==$agent, revision==$revision, ballot==$ballot, issue==$issue, cluster==$cluster )
    then
    	logger.trace("Prepare1A retracted prevote on previous revision : " + $pv);
        retract( $pv );
end

rule "Prepare1A terminates previous Pre_Votes on same issue (same revision, previous ballot)"
	when
		Prepare1A( $agent : agent, $revision : revision, $ballot : ballot, $issue : issue, $cluster : cluster )
        $pv : Pre_Vote( revision==$revision, ballot<$ballot, issue==$issue, cluster==$cluster )
        //pow if role of leader, per if pow
        PreparePow( agent==$agent, revision==$revision, issue==$issue, cluster==$cluster )
        //PreparePer( agent==$agent, revision==$revision, ballot==$ballot, issue==$issue, cluster==$cluster )
    then
    	logger.trace("Prepare1A retracted prevote on previous ballot : " + $pv);
        retract( $pv );
end

rule "Response1B initiates Reported_Vote"
	when
		Response1B( $agent : agent, $voteRevision : voteRevision, $voteBallot : voteBallot, $voteValue : voteValue, $revision : revision, $ballot : ballot, $issue : issue, $cluster : cluster )
		ResponsePow( agent==$agent, revision==$revision, ballot==$ballot, issue==$issue, cluster==$cluster )
	then
		logger.trace("Response1B inserted ReportedVote( " + $agent + " , " + $voteRevision + " , " + $voteBallot + " , " + $voteValue + " , " + $revision + " , " + $ballot + " , " + $issue + " , " + $cluster + " )");
		insert( new ReportedVote( $agent, $voteRevision, $voteBallot, $voteValue, $revision, $ballot, $issue, $cluster ) );
end

rule "Submit2A initiates Open_Vote"
	when
		Submit2A( $agent : agent, $revision : revision, $ballot : ballot, $value : value, $issue : issue, $cluster : cluster )
		SubmitPow( agent==$agent, revision==$revision, ballot==$ballot, issue==$issue, cluster==$cluster )
	then
		logger.trace("Submit2A inserted OpenVote( " + $revision + " , " + $ballot + " , " + " , " + $value + " , " + $issue + " , " + $cluster + " )");
		insert( new Open_Vote( $revision, $ballot, $value, $issue, $cluster ) );
end

rule "Submit2A terminates Pre_Vote"
	when
		Submit2A( $agent : agent, $revision : revision, $ballot : ballot, $value : value, $issue : issue, $cluster : cluster )
		SubmitPow( agent==$agent, revision==$revision, ballot==$ballot, issue==$issue, cluster==$cluster )
		$pv : Pre_Vote( revision==$revision, ballot<$ballot, issue==$issue, cluster==$cluster )
	then
		logger.trace("Submit2A retracted Pre_Vote : " + $pv );
		retract( $pv );
end

rule "Vote initiates Voted and ReportedVote"
	when
		Vote2B( $agent : agent, $revision : revision, $ballot : ballot, $value : value, $issue : issue, $cluster : cluster )
		VotePow( agent==$agent, revision==$revision, ballot==$ballot, value==$value, issue==$issue, cluster==$cluster ) 
	then
		logger.trace("Vote inserted ReportedVote( " + $agent + " , " + $revision + " , " + $ballot + " , " + $value + " , " + $revision + " , " + $ballot + " , " + $issue + " , " + $cluster + " ) and " + 
			" Voted( " + $agent + " , " + $revision + " , " + $ballot + " , " + $value + " , " + $issue + " , " + $cluster + " )");
		insert( new Voted( $agent, $revision, $ballot, $value, $issue, $cluster ) );
		insert( new ReportedVote( $agent, $revision, $ballot, $value, $revision, $ballot, $issue, $cluster ) );
end

rule "holdsAt for Chosen"
	no-loop
	when
		Open_Vote( $revision : revision, $ballot : ballot, $value : value, $issue : issue, $cluster : cluster )
		// prevent multiples  
		not Chosen( revision==$revision, issue==$issue, cluster==$cluster )
		QuorumSize( $quorumSize : quorumSize, revision==$revision, issue==$issue, cluster==$cluster )
		// if number of reportedVotes that arent out of date and are for the value are >= quorumSize, then chosen 
		$reportedVotes : List(size >= $quorumSize) from accumulate (
				$rVote : ReportedVote( $a : agent, voteRevision==$revision, voteBallot<=$ballot, voteValue==$value, revision==$revision, ballot==$ballot, issue==$issue, cluster==$cluster ) and
				not ReportedVote( agent==$a, voteRevision>$revision, issue==$issue, cluster==$cluster ) and
				not ReportedVote( agent==$a, voteRevision==$revision, voteBallot>$ballot, issue==$issue, cluster==$cluster )
				, collectList( $rVote ) ) 
	then
		logger.trace("Inserting Chosen( " + $revision + " , " + $ballot + " , " + $value + " , " + $issue + " , " + $cluster + " )");
		insert( new Chosen( $revision, $ballot, $value, $issue, $cluster ) );
end
		

rule "Arrogate initiates IsLeader"
	when
		ArrogateLeadership( $agent : agent, $revision : revision, $issue : issue, $cluster : cluster )
		//ArrogatePer( agent==$agent, revision==$revision, issue==$issue, cluster==$cluster )
		ArrogatePer( agent==$agent )
	then
		logger.trace("Arrogate inserted HasRole( LEADER " + $agent + " , " + $revision + " , " + $issue + " , " + $cluster + " )");
		insert( new HasRole( Role.LEADER, $agent, $revision, $issue, $cluster ) );
end

rule "Resign terminates IsLeader"
	when
		ResignLeadership( $agent : agent, $revision : revision, $issue : issue, $cluster : cluster )
		ResignPow( agent==$agent, revision==$revision, issue==$issue, cluster==$cluster )
		$role : HasRole( role==Role.LEADER, agent==$agent, revision==$revision, issue==$issue, cluster==$cluster )
	then
		logger.trace("Resign retracted role : " + $role );
		retract( $role );
end

rule "LeaveCluster terminates all roles, syncs, needtosyncs and reported votes"
	when
		LeaveCluster( $agent : agent, $cluster : cluster )
		LeavePow( agent==$agent, cluster==$cluster )
		$roles : HasRole( agent==$agent, cluster==$cluster )
		$syncs : Sync( agent==$agent, cluster==$cluster )
		$reportedVotes : ReportedVote( agent==$agent, cluster==$cluster )
		$needToSyncs : NeedToSync( agent==$agent, cluster==$cluster )
	then
		logger.trace("LeaceCluster retracted lots from agent " + $agent );
		retract( $roles );
		retract( $syncs );
		retract( $reportedVotes );
		retract( $needToSyncs );
		// FIXME what about Voted's ?
end

rule "AddRole initiates role"
	when
		AddRole( $leader : leader, $agent : agent, $role : role, $revision : revision, $issue : issue, $cluster : cluster )
		AddRolePow( leader==$leader, agent==$agent, role==$role, revision==$revision, issue==$issue, cluster==$cluster )
	then
		logger.trace("AddRole inserted HasRole(  " + $role + " , " + $agent + " , " + $revision + " , " + $issue + " , " + $cluster + " )"); 
		insert( new HasRole( $role, $agent, $revision, $issue, $cluster ) );
end

rule "AddRole initiates NeedToSync"
	when
		AddRole( $leader : leader, $agent : agent, $role : role, $revision : revision, $issue : issue, $cluster : cluster )
		AddRolePow( leader==$leader, agent==$agent, role==$role, revision==$revision, issue==$issue, cluster==$cluster )
		Chosen( revision==$revision, $ballot : ballot, $value : value, issue==$issue, cluster==$cluster )
	then
		logger.trace("AddRole inserted NeedToSync(  " + $agent + " , " + $value + " , " + $revision + " , " + $issue + " , " + $cluster + " )"); 
		insert( new NeedToSync( $agent, $value, $revision, $issue, $cluster ) );
end

rule "RemRole terminates role"
	when
		RemRole( $leader : leader, $agent : agent, $role : role, $revision : revision, $issue : issue, $cluster : cluster )
		RemRolePow( leader==$leader, agent==$agent, role==$role, revision==$revision, issue==$issue, cluster==$cluster )
		$roleToRem : HasRole( role==$role, agent==$agent, revision==$revision, issue==$issue, cluster==$cluster )
	then
		logger.trace("RemRole retracted Role : " + $roleToRem );
		retract( $roleToRem );
end

rule "Revise terminates all syncs"
	when
		Revise( $agent : agent, $revision : oldRevision, $issue : issue, $cluster : cluster )
		$x : Sync( agent==$agent, revision==$revision, issue==$issue, cluster==$cluster )
	then
		logger.trace("Revise retracted Sync : " + $x );
		retract( $x );
end

rule "Revise terminates all needtosyncs"
	when
		Revise( $agent : agent, $revision : oldRevision, $issue : issue, $cluster : cluster )
		$x : NeedToSync( agent==$agent, revision==$revision, issue==$issue, cluster==$cluster )
	then
		logger.trace("Revise retracted NeedToSync : " + $x );
		retract( $x );
end

rule "SyncReq initiates Sync"
	when
		SyncReq( $leader : leader, $agent : agent, $value : value, $revision : revision, $issue : issue, $cluster : cluster )
		SyncReqPow( leader==$leader, revision==$revision, issue==$issue, cluster==$cluster )
		$needToSync : NeedToSync( agent==$agent, revision==$revision, issue==$issue, cluster==$cluster )
	then
		logger.trace("Trying to Sync with agent:" + $agent + ", value:" + $value + ", revision:" + $revision + ", issue:" + $issue + ", cluster:" + $cluster );
		insert( new Sync( $agent, $value, $revision, $issue, $cluster ) );
		logger.trace("SyncReq inserted Sync( " + $agent + " , " + $revision + " , " + $issue + " , " + $cluster + " )...");
		// retract NeedtoSync indicator
		retract( $needToSync );
		logger.trace("...  and retracted NeedToSync : " + $needToSync);
end

rule "SyncAck initiates Voted and ReportedVote (if agree)"
	when
		SyncAck( $agent : agent, $answer : value, $revision : revision, $issue : issue, $cluster : cluster )
		$sync : Sync(agent==$agent, revision==$revision, issue==$issue, cluster==$cluster )
		SyncAckPow( agent==$agent, value==$answer, revision==$revision, issue==$issue, cluster==$cluster )
		Chosen( revision==$revision, $ballot : ballot, value==$answer, issue==$issue, cluster==$cluster )
	then
		logger.trace("SyncAck yes inserted Voted( " + $agent + " , " + $revision + " , " + $ballot + " , " + $answer + " , " + $issue + " , " + $cluster + " ) and " +
		 " ReportedVote( " + $agent + " , " + $revision + " , " + $ballot + " , " + $answer + " , " + $revision + " , " + $ballot + " , " + $issue + " , " + $cluster + " )");
		insert( new Voted( $agent, $revision, $ballot, $answer, $issue, $cluster ) );
		insert( new ReportedVote( $agent, $revision, $ballot, $answer, $revision, $ballot, $issue, $cluster ) );
		retract( $sync ); 
		logger.trace("...  and retracted Sync : " + $sync);
end

rule "SyncAck initiates null ReportedVote (if not agree)"
	// doesn't initiate null Voted because that doesn't make sense
	// this might not be needed, depending on implementation of Submit & Response...
	when
		//$answer : null
		SyncAck( $agent : agent, $answer : value, value==null, $revision : revision, $issue : issue, $cluster : cluster )
		$sync : Sync(agent==$agent, revision==$revision, issue==$issue, cluster==$cluster )
		SyncAckPow( agent==$agent, value==$answer, revision==$revision, issue==$issue, cluster==$cluster )
		Chosen( revision==$revision, $ballot : ballot, issue==$issue, cluster==$cluster )
	then
		logger.trace("SyncAck no inserted ReportedVote( " + $agent + " , " + $revision + " , 0 , " + $answer + " , " + $revision + " , " + $ballot + " , " + $issue + " , " + $cluster + " )");
		insert( new ReportedVote( $agent, $revision, 0, $answer, $revision, $ballot, $issue, $cluster ) );
		retract( $sync ); 
		logger.trace("...  and retracted Sync : " + $sync);
end












