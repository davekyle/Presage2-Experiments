//created on: Aug 20, 2012
package uk.ac.imperial.dws04.Presage2Experiments.IPCon

//list any import classes here.
//java
import java.lang.String
import java.lang.Integer
import java.util.UUID
import java.lang.Object
import java.util.List
// my presage2
import uk.ac.imperial.dws04.Presage2Experiments.IPCon.actions.*
import uk.ac.imperial.dws04.Presage2Experiments.IPCon.IPConProtocol.Role
import uk.ac.imperial.dws04.Presage2Experiments.IPCon.facts.IPConAgent
//drls
import uk.ac.imperial.dws04.Presage2Experiments.IPCon.IPCon_Institutional_Facts.*

//declare any global variables here
global org.apache.log4j.Logger logger

// power to make a request0a action
declare RequestPow
	agent : IPConAgent
	revision : Integer
	issue : String
	cluster : UUID
end

// permission to make a request0a action
declare RequestPer
	agent : IPConAgent
	revision : Integer
	issue : String
	cluster : UUID
end

// power to make a prepare1a action
declare PreparePow
	agent : IPConAgent
	revision : Integer
	issue : String
	cluster : UUID
end

// permission to make a prepare1a action
declare PreparePer
	agent : IPConAgent
	revision : Integer
	issue : String
	cluster : UUID
end

// power to make a response1b action
declare ResponsePow
	agent : IPConAgent
//	voteRevision : Integer	// these aren't here because you always have *power* but not always permission
//	voteBallot : Integer
//	voteValue : Object
	revision : Integer
	ballot : Integer
	issue : String
	cluster : UUID 
end

// permission to make a response1b action
declare ResponsePer
	agent : IPConAgent
	voteRevision : Integer
	voteBallot : Integer
	voteValue : Object
	revision : Integer
	ballot : Integer
	issue : String
	cluster : UUID 
end

// power to make a submit2a action
declare SubmitPow
	agent : IPConAgent
	revision : Integer
	ballot : Integer
//	value : Object	// this isn't here because you always have *power* but not always permission
	issue : String
	cluster : UUID
end

// permission to make a submit2a action
declare SubmitPer
	agent : IPConAgent
	revision : Integer
	ballot : Integer
	value : Object
	issue : String
	cluster : UUID
end

// power to make a vote action
declare VotePow
	agent : IPConAgent
	revision : Integer
	ballot : Integer
	value : Object
	issue : String
	cluster : UUID
end

// permission to make a vote action
declare VotePer
	agent : IPConAgent
	revision : Integer
	ballot : Integer
	value : Object
	issue : String
	cluster : UUID
end

// permission to make an arrogate action
declare ArrogatePer
	agent : IPConAgent
end
/*declare ArrogatePer
	agent : IPConAgent
	revision : Integer
	issue : String
	cluster : UUID
end*/	

// power to make a resign action
declare ResignPow
	agent : IPConAgent
	revision : Integer
	issue : String
	cluster : UUID
end	

// power to leave the cluster
declare LeavePow
	agent : IPConAgent
	cluster : UUID
end

//power to addRole
declare AddRolePow
	leader : IPConAgent
	agent : IPConAgent
	role : Role
	revision : Integer
	issue : String
	cluster : UUID
end

// permission to addRole
declare AddRolePer
	leader : IPConAgent
	agent : IPConAgent
	role : Role
	revision : Integer
	issue : String
	cluster : UUID
end	

//power to remRole
declare RemRolePow
	leader : IPConAgent
	agent : IPConAgent
	role : Role
	revision : Integer
	issue : String
	cluster : UUID
end	

//permission to remRole
declare RemRolePer
	leader : IPConAgent
	agent : IPConAgent
	role : Role
	revision : Integer
	issue : String
	cluster : UUID
end	

//power to revise
declare RevisePow
	agent : IPConAgent
	revision : Integer
	issue : String
	cluster : UUID
end

//permission to revise
declare RevisePer
	agent : IPConAgent
	revision : Integer
	issue : String
	cluster : UUID
end

//power to SyncReq (value not included because it doesn't have an effect)
declare SyncReqPow
	leader : IPConAgent
	agent : IPConAgent
	revision : Integer
	issue : String
	cluster : UUID
end

//permission to SyncReq (value included this time)
declare SyncReqPer
	leader : IPConAgent
	agent : IPConAgent
	value : Object
	revision : Integer
	issue : String
	cluster : UUID
end

// power to SyncAck
declare SyncAckPow
	agent : IPConAgent
	value : Object
	revision : Integer
	issue : String
	cluster : UUID
end

//permission to SyncAck
declare SyncAckPer
	agent : IPConAgent
	value : Object
	revision : Integer
	issue : String
	cluster : UUID
end

rule "holdsAt for power to request0a"
	when
		HasRole( role==Role.PROPOSER, $agent : agent, $revision : revision, $issue : issue, $cluster : cluster )
	then
		logger.trace("Logically inserting RequestPow( " + $agent + " , " + $revision + " , " + $issue + " , " + $cluster + ")");
		insertLogical( new RequestPow( $agent, $revision, $issue, $cluster ) );
end

rule "holdsAt for permission to request0a"
	when
		RequestPow( $agent : agent, $revision : revision, $issue : issue, $cluster : cluster )
	then
		logger.trace("Logically inserting RequestPer( " + $agent + " , " + $revision + " , " + $issue + " , " + $cluster + ")");
		insertLogical( new RequestPer(  $agent, $revision, $issue, $cluster ) );
end

rule "holdsAt for power to prepare1a"
	when
		HasRole( role==Role.LEADER, $agent : agent, $revision : revision, $issue : issue, $cluster : cluster )
	then
		logger.trace("Logically inserting PreparePow( " + $agent + " , " + $revision + " , " + $issue + " , " + $cluster + ")");
		insertLogical( new PreparePow( $agent, $revision, $issue, $cluster ) );
end

rule "holdsAt for permission to prepare1a"
	when
		// FIXME TODO maybe needs to take the ballot into account to prevent making them "in the past" ?
		// buuut, how to show that you have permission to do anything above x without making infinite facts ?
		// - put a placeholder in the obligation instead
		PreparePow( $agent : agent, $revision : revision, $issue : issue, $cluster : cluster )
	then
		logger.trace("Logically inserting PreparePer( " + $agent + " , " + $revision + " , " + $issue + " , " + $cluster + ")");
		insertLogical( new PreparePer( $agent, $revision, $issue, $cluster ) );
end

rule "holdsAt for power to reponse1b"
	when
		HasRole( role==Role.ACCEPTOR, $agent : agent, $revision : revision, $issue : issue, $cluster : cluster )
		Pre_Vote( revision==$revision, $ballot : ballot, issue==$issue, cluster==$cluster )
	then
		logger.trace("Logically inserting ResponsePow( " + $agent + " , " + $revision + " , " + $issue + " , " + $cluster + ")");
		insertLogical( new ResponsePow( $agent, $revision, $ballot, $issue, $cluster ) );
end

rule "holdsAt for permission to response1b (if voted)"
	when
		ResponsePow( $agent : agent, $revision : revision, $ballot : ballot, $issue : issue, $cluster : cluster )
		Voted( agent==$agent, $voteRevision : revision, $voteBallot : ballot, $voteValue : value, issue==$issue, cluster==$cluster )
	then
		logger.trace("Logically inserting ResponsePer( " + $agent + " , " + $voteRevision + " , " + $voteBallot + " , " + $voteValue + " , " + $revision + " , " + $issue + " , " + $cluster + ")");
		insertLogical( new ResponsePer( $agent, $voteRevision, $voteBallot, $voteValue, $revision, $ballot, $issue, $cluster ) );
end

rule "holdsAt for permission to response1b (with indicators if didn't vote in this revision)"
	when
		ResponsePow( $agent : agent, $revision : revision, $ballot : ballot, $issue : issue, $cluster : cluster )
		//ResponsePow( $agent : agent, voteRevision==$revision, voteBallot==0, voteValue==null, $revision : revision, $ballot : ballot, $issue : issue, $cluster : cluster )
		not Voted( agent==$agent, revision==$revision, issue==$issue, cluster==$cluster )
	then
		logger.trace("Logically inserting ResponsePer( " + $agent + " , " + $revision + " , 0 , null , " + $revision + " , " + $issue + " , " + $cluster + ")");
		insertLogical( new ResponsePer( $agent, $revision, 0, null, $revision, $ballot, $issue, $cluster ) );
end

rule "holdsAt for power to submit2a"
	when
		HasRole( role==Role.LEADER, $agent : agent, $revision : revision, $issue : issue, $cluster : cluster )
		Pre_Vote( revision==$revision, $ballot : ballot, issue==$issue, cluster==$cluster )
	then
		logger.trace("Logically inserting SubmitPow( " + $agent + " , " + $revision + " , " + $ballot + " , " + $issue + " , " + $cluster + ")");
		insertLogical( new SubmitPow( $agent, $revision, $ballot, $issue, $cluster ) );
end

rule "holdsAt for permission to submit2a"
	when
		SubmitPow( $agent : agent, $revision : revision, $ballot : ballot, $issue : issue, $cluster : cluster )
		Proposed( revision==$revision, $value : value, issue==$issue, cluster==$cluster )
		//$quorumSize : quorumSize( $revision, $issue, $cluster ;)
		QuorumSize( $quorumSize : quorumSize, revision==$revision, issue==$issue, cluster==$cluster )
		//not true
		// FIXME TODO calculate safety ?
		// TODO make sure to take null reportedVotes into account
		// TODO probably need to do nested from collects ? Or use queries ?
		
		// get all ReportedVotes
		
		// get the highest ReportedVote with the highest ballotNumber for each agent
		
		// ignore all that are in lower revisions than this
		
		// check there are no votes in any ballots later than this one
		
		// get the set of agents that those ReportedVotes are about
		
		// make sure you have >= $quorumSize of them
		
		// make all the possible quorumSize-sized groups of them
		
		// for each group, check that the hnb is either $value or null
		
		// if so, $value is safe
		
		////
		
		// get all ReportedVote facts that aren't out of date (hard part)
		//	// ReportedVote( $a, $vote, $RIC) and
		//	// not ReportedVote( $a, r1>$R, $IC) and
		//	// not ReportedVote( $a, b1>$B, $RIC)
		//	// (this solution presumes nullvotes are reported by the agents... )
		$reportedVotes : List(size >= $quorumSize) from accumulate (
				$rVote : ReportedVote( $a : agent, voteRevision==$revision, voteBallot<=$ballot, (voteValue==$value || voteValue==null), revision==$revision, ballot==$ballot, issue==$issue, cluster==$cluster ) and
				not ReportedVote( agent==$a, voteRevision>$revision, issue==$issue, cluster==$cluster ) and
				not ReportedVote( agent==$a, voteRevision==$revision, voteBallot>$ballot, issue==$issue, cluster==$cluster ) // probably don't need this line due to <=$ballot in first one...
				, collectList( $rVote ) ) 
		// find all quorumSize'd sets of ReportedVote facts (done by size constraint on $reportedVotes)
		// if all of the facts in the group you're looking at have the voteValue of null or $value, yay (done by conditional on voteValue)
		
		
	then
		logger.trace("Logically inserting SubmitPer( " + $agent + " , " + $revision + " , " + $ballot + " , " + $value + " , " + $issue + " , " + $cluster + ")");
		insertLogical( new SubmitPer( $agent, $revision, $ballot, $value, $issue, $cluster ) );
end

rule "holdsAt for power to vote"
	when
		HasRole( role==Role.ACCEPTOR, $agent : agent, $revision : revision, $issue : issue, $cluster : cluster )
		Open_Vote( revision==$revision, $ballot : ballot, $value : value, issue==$issue, cluster==$cluster )
	then
		logger.trace("Logically inserting VotePow( " + $agent + " , " + $revision + " , " + $ballot + " , " + $value + " , " + $issue + " , " + $cluster + ")");
		insertLogical( new VotePow( $agent, $revision, $ballot, $value, $issue, $cluster ) );
end

rule "holdsAt for permission to vote"
	when
		VotePow( $agent : agent, $revision : revision, $ballot : ballot, $value : value, $issue : issue, $cluster : cluster )
		// didn't vote in a higher ballot in this revision
		not Voted( agent==$agent, revision==$revision, ballot>=$ballot, issue==$issue, cluster==$cluster )
		// didn't vote in a higher revision
		not Voted( agent==$agent, revision>$revision, issue==$issue, cluster==$cluster )
	then
		logger.trace("Logically inserting VotePer( " + $agent + " , " + $revision + " , " + $ballot + " , " + $value + " , " + $issue + " , " + $cluster + ")");
		insertLogical( new VotePer( $agent, $revision, $ballot, $value, $issue, $cluster ) );
end

rule "holdsAt for permission to arrogate"
	when
		$agent : IPConAgent( )
		//Can't do checks for roles you already have easily, so HACKITY HACK
	then
		logger.trace("Logically inserting ArrogatePer( " + $agent + ")");
		insertLogical( new ArrogatePer( $agent ) );
end

/*
rule "holdsAt for permission to arrogate"
	when
		$agent : IPConAgent( )
		//FIXME TODO Can't define new ones in 'not' constraints ?
		not HasRole( role==Role.LEADER, agent==$agent, revision==$revision, issue==$issue, cluster==$cluster )
	then
		logger.trace("Logically inserting ArrogatePer( " + $agent + " , " + $revision + " , " + $issue + " , " + $cluster + ")");
		insertLogical( new ArrogatePer( $agent, $revision, $issue, $cluster ) );
end
*/

rule "holdsAt for power to resign"
	when
		HasRole( role==Role.LEADER, $agent : agent, $revision : revision, $issue : issue, $cluster : cluster )
	then
		logger.trace("Logically inserting ResignPow( " + $agent + " , " + $revision + " , " + $issue + " , " + $cluster + ")");
		insertLogical( new ResignPow( $agent, $revision, $issue, $cluster ) );
end

rule "holdsAt for power to leave"
	when
		HasRole( $agent : agent, $cluster : cluster )
	then
		logger.trace("Logically inserting LeavePow( " + $agent + " , " + $cluster + ")");
		insertLogical( new LeavePow( $agent, $cluster ) );
end

rule "holdsAt for power to addRole"
	when
		HasRole( role==Role.LEADER, $leader : agent, $revision : revision, $issue : issue, $cluster : cluster )
		//Can't define new ones in 'not' constraints
		$agent : IPConAgent(  )
		$role : Role( )
		not HasRole( role==$role, agent==$agent, revision==$revision, issue==$issue, cluster==$cluster )
	then
		logger.trace("Logically inserting AddRolePow( " + $leader + " , " + $agent + " , " + $role + " , " + $revision + " , " + $issue + " , " + $cluster + ")");
		insertLogical( new AddRolePow( $leader, $agent, $role, $revision, $issue, $cluster ) );
end

rule "holdsAt for permission to addRole"
	when
		AddRolePow( $leader : leader, $agent : agent, $role : role, $revision : revision, $issue : issue, $cluster : cluster )
	then
		logger.trace("Logically inserting AddRolePer( " + $leader + " , " + $agent + " , " + $role + " , " + $revision + " , " + $issue + " , " + $cluster + ")");
		insertLogical( new AddRolePer( $leader, $agent, $role, $revision, $issue, $cluster ) );
end

rule "holdsAt for power to remRole"
	when
		HasRole( role==Role.LEADER, $leader : agent, $revision : revision, $issue : issue, $cluster : cluster )
		HasRole( $role : role, $agent : agent, revision==$revision, issue==$issue, cluster==$cluster )
	then
		logger.trace("Logically inserting RemRolePow( " + $leader + " , " + $agent + " , " + $role + " , " + $revision + " , " + $issue + " , " + $cluster + ")");
		insertLogical( new RemRolePow( $leader, $agent, $role, $revision, $issue, $cluster ) );
end

rule "holdsAt for permission to remRole"
	when
		RemRolePow( $leader : leader, $agent : agent, $role : role, $revision : revision, $issue : issue, $cluster : cluster )
	then
		logger.trace("Logically inserting RemRolePer( " + $leader + " , " + $agent + " , " + $role + " , " + $revision + " , " + $issue + " , " + $cluster + ")");
		insertLogical( new RemRolePer( $leader, $agent, $role, $revision, $issue, $cluster ) );
end

rule "holdsAt for pow to revise"
	when
		HasRole( role==Role.LEADER, $agent : agent, $revision : revision, $issue : issue, $cluster : cluster )
	then
		logger.trace("Logically inserting RevisePow( " + $agent + " , " + $revision + " , " + $issue + " , " + $cluster + ")");
		insertLogical( new RevisePow( $agent, $revision, $issue, $cluster ) );
end

rule "holdsAt for per to revise"
	when
		RevisePow( $agent : agent, $revision : revision, $issue : issue, $cluster : cluster )
	then
		logger.trace("Logically inserting RevisePer( " + $agent + " , " + $revision + " , " + $issue + " , " + $cluster + ")");
		insertLogical( new RevisePer( $agent, $revision, $issue, $cluster ) );
end

rule "holdsAt for pow to SyncReq"
	when
		HasRole( role==Role.LEADER, $leader : agent, $revision : revision, $issue : issue, $cluster : cluster )
		// added this check that wasn't in the prolog because it makes more sense, and constrains the amount of facts that are inserted :P
		HasRole( role==Role.ACCEPTOR, $agent : agent, revision==$revision, issue==$issue, cluster==$cluster )
	then
		logger.trace("Logically inserting SyncReqPow( " + $leader + " , " + $agent + " , " + $revision + " , " + $issue + " , " + $cluster + ")");
		insertLogical( new SyncReqPow( $leader, $agent, $revision, $issue, $cluster ) );
end

rule "holdsAt for per to SyncReq"
	when
		HasRole( role==Role.ACCEPTOR, $agent : agent, $revision : revision, $issue : issue, $cluster : cluster )
		HasRole( role==Role.LEADER, $leader : agent, revision==$revision, issue==$issue, cluster==$cluster )
		// avoiding temporal checks by using declared institutional fact checking - Chosen can be retracted
		Chosen( revision==$revision, $value : value, issue==$issue, cluster==$cluster )
		//using a signal fact rather than a temporal event to avoid having to use temporal operators
		NeedToSync( agent==$agent, revision==$revision, issue==$issue, cluster==$cluster )
	then
		logger.trace("Logically inserting SyncReqPer( " + $leader + " , " + $agent + " , " + $revision + " , " + $issue + " , " + $cluster + ")");
		insertLogical( new SyncReqPer( $leader, $agent, $value, $revision, $issue, $cluster ) );
end

rule "holdsAt for pow to SyncAck (yes)"
	when
		HasRole( role==Role.ACCEPTOR, $agent : agent, $revision : revision, $issue : issue, $cluster : cluster )
		Sync( agent==$agent, $value : value, revision==$revision, issue==$issue, cluster==$cluster )
		// FIXME TODO work out how to do this
		//( $answer==$value || $answer==null )
	then
		logger.trace("Logically inserting SyncAckPow( " + $agent + " , " + $value + " , " + $revision + " , " + $issue + " , " + $cluster + ")");
		insertLogical( new SyncAckPow( $agent, $value, $revision, $issue, $cluster ) );
end

rule "holdsAt for pow to SyncAck (no)"
	when
		HasRole( role==Role.ACCEPTOR, $agent : agent, $revision : revision, $issue : issue, $cluster : cluster )
		Sync( agent==$agent, $value : value, revision==$revision, issue==$issue, cluster==$cluster )
		// FIXME TODO work out how to do this
		//( $answer==$value || $answer==null )
	then
		logger.trace("Logically inserting SyncAckPow( " + $agent + " , null , " + $revision + " , " + $issue + " , " + $cluster + ")");
		insertLogical( new SyncAckPow( $agent, null, $revision, $issue, $cluster ) );
end

rule "holdsAt for per to SyncAck"
	when
		SyncAckPow( $agent : agent, $value : value, $revision : revision, $issue : issue, $cluster : cluster )
	then
		logger.trace("Logically inserting SyncAckPer( " + $agent + " , " + $value + " , " + $revision + " , " + $issue + " , " + $cluster + ")");
		insertLogical( new SyncAckPer( $agent, $value, $revision, $issue, $cluster ) );
end
		 
		 
		 
		 
		 




