//created on: Aug 20, 2012
package uk.ac.imperial.dws04.Presage2Experiments.IPCon

//list any import classes here.
//java
import java.lang.String
import java.lang.Integer
import java.util.UUID
import java.lang.Object
import java.util.List
// my presage2
import uk.ac.imperial.dws04.Presage2Experiments.IPCon.actions.*
import uk.ac.imperial.dws04.Presage2Experiments.IPCon.Role
import uk.ac.imperial.dws04.Presage2Experiments.IPCon.facts.*
//drls
//import uk.ac.imperial.dws04.Presage2Experiments.IPCon.IPCon_Institutional_Facts.*

//declare any global variables here
global org.apache.log4j.Logger logger
global Object IPCNV_val

declare Power
	agent : IPConAgent
	action : IPConAction
end

declare Permission
	agent : IPConAgent
	action : IPConAction
end

/*
// power to make a request0a action
declare RequestPow
	agent : IPConAgent
	revision : Integer
	issue : String
	cluster : UUID
end

// permission to make a request0a action
declare RequestPer
	agent : IPConAgent
	revision : Integer
	issue : String
	cluster : UUID
end

// power to make a prepare1a action
declare PreparePow
	agent : IPConAgent
	revision : Integer
	issue : String
	cluster : UUID
end

// permission to make a prepare1a action
declare PreparePer
	agent : IPConAgent
	revision : Integer
	issue : String
	cluster : UUID
end

// power to make a response1b action
declare ResponsePow
	agent : IPConAgent
//	voteRevision : Integer	// these aren't here because you always have *power* but not always permission
//	voteBallot : Integer
//	voteValue : Object
	revision : Integer
	ballot : Integer
	issue : String
	cluster : UUID 
end

// permission to make a response1b action
declare ResponsePer
	agent : IPConAgent
	voteRevision : Integer
	voteBallot : Integer
	voteValue : Object
	revision : Integer
	ballot : Integer
	issue : String
	cluster : UUID 
end

// power to make a submit2a action
declare SubmitPow
	agent : IPConAgent
	revision : Integer
	ballot : Integer
//	value : Object	// this isn't here because you always have *power* but not always permission
	issue : String
	cluster : UUID
end

// permission to make a submit2a action
declare SubmitPer
	agent : IPConAgent
	revision : Integer
	ballot : Integer
	value : Object
	issue : String
	cluster : UUID
end

// power to make a vote action
declare VotePow
	agent : IPConAgent
	revision : Integer
	ballot : Integer
	value : Object
	issue : String
	cluster : UUID
end

// permission to make a vote action
declare VotePer
	agent : IPConAgent
	revision : Integer
	ballot : Integer
	value : Object
	issue : String
	cluster : UUID
end

// permission to make an arrogate action
declare ArrogatePow
	agent : IPConAgent
end	

// power to make a resign action
declare ResignPow
	agent : IPConAgent
	revision : Integer
	issue : String
	cluster : UUID
end	

// power to leave the cluster
declare LeavePow
	agent : IPConAgent
	cluster : UUID
end

//power to addRole
declare AddRolePow
	leader : IPConAgent
	agent : IPConAgent
	role : Role
	revision : Integer
	issue : String
	cluster : UUID
end

// permission to addRole
declare AddRolePer
	leader : IPConAgent
	agent : IPConAgent
	role : Role
	revision : Integer
	issue : String
	cluster : UUID
end	

//power to remRole
declare RemRolePow
	leader : IPConAgent
	agent : IPConAgent
	role : Role
	revision : Integer
	issue : String
	cluster : UUID
end	

//permission to remRole
declare RemRolePer
	leader : IPConAgent
	agent : IPConAgent
	role : Role
	revision : Integer
	issue : String
	cluster : UUID
end	

//power to revise
declare RevisePow
	agent : IPConAgent
	revision : Integer
	issue : String
	cluster : UUID
end

//permission to revise
declare RevisePer
	agent : IPConAgent
	revision : Integer
	issue : String
	cluster : UUID
end

//power to SyncReq (value not included because it doesn't have an effect)
declare SyncReqPow
	leader : IPConAgent
	agent : IPConAgent
	revision : Integer
	issue : String
	cluster : UUID
end

//permission to SyncReq (value included this time)
declare SyncReqPer
	leader : IPConAgent
	agent : IPConAgent
	value : Object
	revision : Integer
	issue : String
	cluster : UUID
end

// power to SyncAck
declare SyncAckPow
	agent : IPConAgent
	value : Object
	revision : Integer
	issue : String
	cluster : UUID
end

//permission to SyncAck
declare SyncAckPer
	agent : IPConAgent
	value : Object
	revision : Integer
	issue : String
	cluster : UUID
end
*/

rule "holdsAt for power to request0a"
	when
		HasRole( role==Role.PROPOSER, $agent : agent, $revision : revision, $issue : issue, $cluster : cluster )
	then
		logger.trace("Logically toggling RequestPow( " + $agent + " , " + $revision + " , " + $issue + " , " + $cluster + ")");
		Request0A $request = new Request0A( $agent, $revision, null, $issue, $cluster );
		insertLogical( new Power( $agent, $request ) );
end

rule "holdsAt for permission to request0a"
	when
		//RequestPow( $agent : agent, $revision : revision, $issue : issue, $cluster : cluster )
		Power( $agent : agent,	$action : action )
		Request0A( agent==$agent, $revision : revision, $issue : issue, $cluster : cluster ) from $action
	then
		logger.trace("Logically toggling RequestPer( " + $agent + " , " + $revision + " , " + $issue + " , " + $cluster + ")");
		Request0A $request = new Request0A( $agent, $revision, null, $issue, $cluster );
		insertLogical( new Permission(  $agent, $request ) );
end

rule "holdsAt for power to prepare1a"
	when
		HasRole( role==Role.LEADER, $agent : agent, $revision : revision, $issue : issue, $cluster : cluster )
	then
		logger.trace("Logically toggling PreparePow( " + $agent + " , " + $revision + " , " + $issue + " , " + $cluster + ")");
		Prepare1A $prepare = new Prepare1A( $agent, $revision, null, $issue, $cluster );
		insertLogical( new Power( $agent, $prepare ) );
end

rule "holdsAt for permission to prepare1a"
	when
		// FIXME TODO maybe needs to take the ballot into account to prevent making them "in the past" ?
		// buuut, how to show that you have permission to do anything above x without making infinite facts ?
		// - put a placeholder in the obligation instead
		//PreparePow( $agent : agent, $revision : revision, $issue : issue, $cluster : cluster )
		Power( $agent : agent, $action : action )
		Prepare1A( agent==$agent, $revision : revision, $issue : issue, $cluster : cluster ) from $action
	then
		logger.trace("Logically toggling PreparePer( " + $agent + " , " + $revision + " , " + $issue + " , " + $cluster + ")");
		Prepare1A $prepare = new Prepare1A( $agent, $revision, null, $issue, $cluster );
		insertLogical( new Permission( $agent, $prepare ) );
end

rule "holdsAt for power to reponse1b"
	when
		HasRole( role==Role.ACCEPTOR, $agent : agent, $revision : revision, $issue : issue, $cluster : cluster )
		Pre_Vote( revision==$revision, $ballot : ballot, issue==$issue, cluster==$cluster )
	then
		logger.trace("Logically toggling ResponsePow( " + $agent + " , " + $revision + " , " + $issue + " , " + $cluster + ")");
		Response1B $response = new Response1B( $agent, null, null, null, $revision, $ballot, $issue, $cluster );
		insertLogical( new Power( $agent, $response ) );
end

rule "holdsAt for permission to response1b (if voted)"
	when
		//ResponsePow( $agent : agent, $revision : revision, $ballot : ballot, $issue : issue, $cluster : cluster )
		Power( $agent : agent, $action : action )
		Response1B( agent==$agent, $revision : revision, $ballot : ballot, $issue : issue, $cluster : cluster ) from $action
		// only allowed to respond about this revision or higher...
		Voted( agent==$agent, $voteRevision : revision, revision>=$revision, $voteBallot : ballot, $voteValue : value, issue==$issue, cluster==$cluster )
		// only allowed to respond about highest vote
		not Voted (agent==$agent, (revision>$voteRevision || (revision==$voteRevision && ballot>$voteBallot)), issue==$issue, cluster==$cluster ) 
	then
		logger.trace("Logically toggling ResponsePer( " + $agent + " , " + $voteRevision + " , " + $voteBallot + " , " + $voteValue + " , " + $revision + " , " + $issue + " , " + $cluster + ")");
		Response1B $response = new Response1B( $agent, $voteRevision, $voteBallot, $voteValue, $revision, $ballot, $issue, $cluster );
		insertLogical( new Permission( $agent, $response ) );
end

rule "holdsAt for permission to response1b (with indicators if didn't vote in this revision)"
	when
		//ResponsePow( $agent : agent, $revision : revision, $ballot : ballot, $issue : issue, $cluster : cluster )
		Power( $agent : agent, $action : action )
		Response1B( agent==$agent, $revision : revision, $ballot : ballot, $issue : issue, $cluster : cluster ) from $action
		//ResponsePow( $agent : agent, voteRevision==$revision, voteBallot==0, voteValue==null, $revision : revision, $ballot : ballot, $issue : issue, $cluster : cluster )
		not Voted( agent==$agent, revision==$revision, issue==$issue, cluster==$cluster )
	then
		logger.trace("Logically toggling ResponsePer( " + $agent + " , " + $revision + " , 0 , " + IPCNV.val() + " , " + $revision + " , " + $issue + " , " + $cluster + ")");
		Response1B $response = new Response1B( $agent, $revision, 0, IPCNV.val(), $revision, $ballot, $issue, $cluster );
		insertLogical( new Permission( $agent, $response ) );
end

rule "holdsAt for power to submit2a"
// either if there is a pre_vote, or if there is an openvote
//(allows pre_vote to be terminated, but more submits to occur)
	when
		HasRole( role==Role.LEADER, $agent : agent, $revision : revision, $issue : issue, $cluster : cluster )
		Pre_Vote( revision==$revision, $ballot : ballot, issue==$issue, cluster==$cluster )
	then
		logger.trace("Logically toggling SubmitPow( " + $agent + " , " + $revision + " , " + $ballot + " , " + $issue + " , " + $cluster + ")");
		Submit2A $submit = new Submit2A( $agent, $revision, $ballot, null, $issue, $cluster );
		insertLogical( new Power( $agent, $submit ) );
end

rule "holdsAt for permission to submit2a"
	when
		//SubmitPow( $agent : agent, $revision : revision, $ballot : ballot, $issue : issue, $cluster : cluster )
		Power( $agent : agent, $action : action )
		Submit2A( agent==$agent, $revision : revision, $ballot : ballot, $issue : issue, $cluster : cluster ) from $action
		Proposed( revision==$revision, $value : value, issue==$issue, cluster==$cluster )
		//$quorumSize : quorumSize( $revision, $issue, $cluster ;)
		QuorumSize( $quorumSize : quorumSize, revision==$revision, issue==$issue, cluster==$cluster )
		
		
		// get all ReportedVote facts that aren't out of date (hard part)
		//	// ReportedVote( $a, $vote, $RIC) and
		//	// not ReportedVote( $a, r1>$R, $IC) and
		//	// not ReportedVote( $a, b1>$B, $RIC)
		//	// (this solution presumes nullvotes are reported by the agents... )
		$reportedVotes : List(size >= $quorumSize) from accumulate (
				$rVote : ReportedVote( $a : agent, voteRevision==$revision, voteBallot<=$ballot, (voteValue==$value || voteValue==IPCNV.val()), revision==$revision, ballot==$ballot, issue==$issue, cluster==$cluster ) and
				not ReportedVote( agent==$a, voteRevision>$revision, issue==$issue, cluster==$cluster ) and
				not ReportedVote( agent==$a, voteRevision==$revision, voteBallot>$ballot, issue==$issue, cluster==$cluster )
				, collectList( $rVote ) ) 
		// find all quorumSize'd sets of ReportedVote facts (done by size constraint on $reportedVotes)
		// if all of the facts in the group you're looking at have the voteValue of null or $value, yay (done by conditional on voteValue)
		
		
	then
		logger.trace("Logically toggling SubmitPer( " + $agent + " , " + $revision + " , " + $ballot + " , " + $value + " , " + $issue + " , " + $cluster + ")");
		//logger.trace("RVotes is: " + $reportedVotes);
		Submit2A $submit = new Submit2A( $agent, $revision, $ballot, $value, $issue, $cluster );
		insertLogical( new Permission( $agent, $submit ) );
end

rule "holdsAt for power to vote"
	when
		HasRole( role==Role.ACCEPTOR, $agent : agent, $revision : revision, $issue : issue, $cluster : cluster )
		Open_Vote( revision==$revision, $ballot : ballot, $value : value, issue==$issue, cluster==$cluster )
	then
		logger.trace("Logically toggling VotePow( " + $agent + " , " + $revision + " , " + $ballot + " , " + $value + " , " + $issue + " , " + $cluster + ")");
		Vote2B $vote = new Vote2B( $agent, $revision, $ballot, $value, $issue, $cluster );
		insertLogical( new Power( $agent, $vote ) );
end

rule "holdsAt for permission to vote"
	when
		//VotePow( $agent : agent, $revision : revision, $ballot : ballot, $value : value, $issue : issue, $cluster : cluster )
		Power( $agent : agent, $action : action )
		Vote2B( agent==$agent, $revision : revision, $ballot : ballot, $value : value, $issue : issue, $cluster : cluster ) from $action
		// didn't vote in a higher ballot in this revision
		not Voted( agent==$agent, revision==$revision, ballot>$ballot, issue==$issue, cluster==$cluster )
		// didn't vote in a higher revision
		not Voted( agent==$agent, revision>$revision, issue==$issue, cluster==$cluster )
	then
		logger.trace("Logically toggling VotePer( " + $agent + " , " + $revision + " , " + $ballot + " , " + $value + " , " + $issue + " , " + $cluster + ")");
		Vote2B $vote = new Vote2B( $agent, $revision, $ballot, $value, $issue, $cluster );
		insertLogical( new Permission( $agent, $vote ) );
end

rule "holdsAt for power to arrogate"
	when
		$agent : IPConAgent( )
		//Can't do checks for roles you already have easily, so HACKITY HACK
		// (This is because you don't know the revision/issue/cluster in advance (you need to be able to bootstrap)
	then
		logger.trace("Logically toggling ArrogatePow( " + $agent + ")");
		ArrogateLeadership $arrogate = new ArrogateLeadership( $agent, null, null, null );
		insertLogical( new Power( $agent, $arrogate ) );
end

rule "holdsAt for per to arrogate"
	when
		Power( $agent : agent, $action : action )
		ArrogateLeadership( agent==$agent ) from $action
	then
		logger.trace("Logically toggling ArrogatePer( " + $agent + ")");
		ArrogateLeadership $arrogate = new ArrogateLeadership( $agent, null, null, null );
		insertLogical( new Permission( $agent, $arrogate ) );
end

rule "holdsAt for power to resign"
	when
		HasRole( role==Role.LEADER, $agent : agent, $revision : revision, $issue : issue, $cluster : cluster )
	then
		logger.trace("Logically toggling ResignPow( " + $agent + " , " + $revision + " , " + $issue + " , " + $cluster + ")");
		ResignLeadership $resign = new ResignLeadership( $agent, $revision, $issue, $cluster );
		insertLogical( new Power( $agent, $resign ) );
end

rule "holdsAt for per to resign"
	when
		HasRole( role==Role.LEADER, $agent : agent, $revision : revision, $issue : issue, $cluster : cluster )
	then
		logger.trace("Logically toggling ResignPer( " + $agent + " , " + $revision + " , " + $issue + " , " + $cluster + ")");
		ResignLeadership $resign = new ResignLeadership( $agent, $revision, $issue, $cluster );
		insertLogical( new Permission( $agent, $resign ) );
end

rule "holdsAt for power to leave"
	//agenda-group "exit"
	//auto-focus true
// Can't use an exists() on this because the cluster is declared in it...
// Would need to make explicit Cluster fact (IPConRIC won't work because would be many
// and then the same exists() problem occurs...)
	when
		$agent : IPConAgent( )
		HasRole( agent==$agent, $cluster : cluster )
	then
		logger.trace("Logically toggling LeavePow( " + $agent + " , " + $cluster + ")");
		LeaveCluster $leave = new LeaveCluster( $agent, $cluster );
		insertLogical( new Power( $agent, $leave ) );
end

rule "holdsAt for per to leave"
	when
		$agent : IPConAgent( )
		HasRole( agent==$agent, $cluster : cluster )
	then
		logger.trace("Logically toggling LeavePer( " + $agent + " , " + $cluster + ")");
		LeaveCluster $leave = new LeaveCluster( $agent, $cluster );
		insertLogical( new Permission( $agent, $leave ) );
end		

rule "holdsAt for power to addRole"
	agenda-group "exit"
	auto-focus true
	lock-on-active true
	when
		HasRole( role==Role.LEADER, $leader : agent, $revision : revision, $issue : issue, $cluster : cluster )
		//Can't define new ones in 'not' constraints
		$agent : IPConAgent(  )
		$role : Role( )
		not HasRole( role==$role, agent==$agent, revision==$revision, issue==$issue, cluster==$cluster )
	then
		logger.trace("Logically toggling AddRolePow( " + $leader + " , " + $agent + " , " + $role + " , " + $revision + " , " + $issue + " , " + $cluster + ")");
		AddRole $addRole = new AddRole( $leader, $agent, $role, $revision, $issue, $cluster );
		insertLogical( new Power( $leader, $addRole ) );
end

rule "holdsAt for permission to addRole"
	agenda-group "exit"
	auto-focus true
	//lock-on-active true
	when
		//AddRolePow( $leader : leader, $agent : agent, $role : role, $revision : revision, $issue : issue, $cluster : cluster )
		Power( $leader : agent, $action : action )
		AddRole( leader==$leader, $agent : agent, $role : role, $revision : revision, $issue : issue, $cluster : cluster ) from $action
	then
		logger.trace("Logically toggling AddRolePer( " + $leader + " , " + $agent + " , " + $role + " , " + $revision + " , " + $issue + " , " + $cluster + ")");
		AddRole $addRole = new AddRole( $leader, $agent, $role, $revision, $issue, $cluster );
		insertLogical( new Permission( $leader, $addRole ) );
end

rule "holdsAt for power to remRole"
	when
		HasRole( role==Role.LEADER, $leader : agent, $revision : revision, $issue : issue, $cluster : cluster )
		HasRole( $role : role, $agent : agent, revision==$revision, issue==$issue, cluster==$cluster )
	then
		logger.trace("Logically toggling RemRolePow( " + $leader + " , " + $agent + " , " + $role + " , " + $revision + " , " + $issue + " , " + $cluster + ")");
		RemRole $remRole = new RemRole( $leader, $agent, $role, $revision, $issue, $cluster );
		insertLogical( new Power( $leader, $remRole ) );
end

rule "holdsAt for permission to remRole"
	when
		//RemRolePow( $leader : leader, $agent : agent, $role : role, $revision : revision, $issue : issue, $cluster : cluster )
		Power( $leader : agent, $action : action )
		RemRole( leader==$leader, $agent : agent, $role : role, $revision : revision, $issue : issue, $cluster : cluster ) from $action
	then
		logger.trace("Logically toggling RemRolePer( " + $leader + " , " + $agent + " , " + $role + " , " + $revision + " , " + $issue + " , " + $cluster + ")");
		RemRole $remRole = new RemRole( $leader, $agent, $role, $revision, $issue, $cluster );
		insertLogical( new Permission( $leader, $remRole ) );
end

rule "holdsAt for pow to revise"
	when
		HasRole( role==Role.LEADER, $agent : agent, $revision : revision, $issue : issue, $cluster : cluster )
	then
		logger.trace("Logically toggling RevisePow( " + $agent + " , " + $revision + " , " + $issue + " , " + $cluster + ")");
		Revise $revise = new Revise( $agent, $revision, $issue, $cluster );
		insertLogical( new Power( $agent, $revise ) );
end

rule "holdsAt for per to revise"
	when
		//RevisePow( $agent : agent, $revision : revision, $issue : issue, $cluster : cluster )
		Power( $agent : agent, $action : action )
		Revise( agent==$agent, $revision : revision, $issue : issue, $cluster : cluster ) from $action
	then
		logger.trace("Logically toggling RevisePer( " + $agent + " , " + $revision + " , " + $issue + " , " + $cluster + ")");
		Revise $revise = new Revise( $agent, $revision, $issue, $cluster );
		insertLogical( new Permission( $agent, $revise ) );
end

rule "holdsAt for pow to SyncReq"
	when
		HasRole( role==Role.LEADER, $leader : agent, $revision : revision, $issue : issue, $cluster : cluster )
		// added this check that wasn't in the prolog because it makes more sense, and constrains the amount of facts that are inserted :P
		HasRole( role==Role.ACCEPTOR, $agent : agent, revision==$revision, issue==$issue, cluster==$cluster )
	then
		logger.trace("Logically toggling SyncReqPow( " + $leader + " , " + $agent + " , " + $revision + " , " + $issue + " , " + $cluster + ")");
		SyncReq $syncReq = new SyncReq( $leader, $agent, null, $revision, $issue, $cluster );
		insertLogical( new Power( $leader, $syncReq ) );
end

rule "holdsAt for per to SyncReq"
	when
		HasRole( role==Role.ACCEPTOR, $agent : agent, $revision : revision, $issue : issue, $cluster : cluster )
		HasRole( role==Role.LEADER, $leader : agent, revision==$revision, issue==$issue, cluster==$cluster )
		// avoiding temporal checks by using declared institutional fact checking - Chosen can be retracted
		Chosen( revision==$revision, $value : value, issue==$issue, cluster==$cluster )
		//using a signal fact rather than a temporal event to avoid having to use temporal operators
		NeedToSync( agent==$agent, revision==$revision, issue==$issue, cluster==$cluster )
	then
		logger.trace("Logically toggling SyncReqPer( " + $leader + " , " + $agent + " , " + $revision + " , " + $issue + " , " + $cluster + ")");
		SyncReq $syncReq = new SyncReq( $leader, $agent, $value, $revision, $issue, $cluster );
		insertLogical( new Permission( $leader, $syncReq ) );
end

rule "holdsAt for pow to SyncAck (yes)"
	when
		HasRole( role==Role.ACCEPTOR, $agent : agent, $revision : revision, $issue : issue, $cluster : cluster )
		Sync( agent==$agent, $value : value, revision==$revision, issue==$issue, cluster==$cluster )
		// FIXME TODO work out how to do this
		//( $answer==$value || $answer==null )
	then
		logger.trace("Logically toggling SyncAckPow( " + $agent + " , " + $value + " , " + $revision + " , " + $issue + " , " + $cluster + ")");
		SyncAck $syncAck = new SyncAck( $agent, $value, $revision, $issue, $cluster );
		insertLogical( new Power( $agent, $syncAck ) );
end

rule "holdsAt for pow to SyncAck (no)"
	when
		HasRole( role==Role.ACCEPTOR, $agent : agent, $revision : revision, $issue : issue, $cluster : cluster )
		Sync( agent==$agent, $value : value, revision==$revision, issue==$issue, cluster==$cluster )
		// FIXME TODO work out how to do this
		//( $answer==$value || $answer==null )
	then
		logger.trace("Logically toggling SyncAckPow( " + $agent + " , null , " + $revision + " , " + $issue + " , " + $cluster + ")");
		SyncAck $syncAck = new SyncAck( $agent, IPCNV_val, $revision, $issue, $cluster );
		insertLogical( new Power( $agent, $syncAck ) );
end

rule "holdsAt for per to SyncAck"
	when
		//SyncAckPow( $agent : agent, $value : value, $revision : revision, $issue : issue, $cluster : cluster )
		Power( $agent : agent, $action : action )
		SyncAck( agent==$agent, $value : value, $revision : revision, $issue : issue, $cluster : cluster ) from $action
	then
		logger.trace("Logically toggling SyncAckPer( " + $agent + " , " + $value + " , " + $revision + " , " + $issue + " , " + $cluster + ")");
		SyncAck $syncAck = new SyncAck( $agent, $value, $revision, $issue, $cluster );
		insertLogical( new Permission( $agent, $syncAck ) );
end

rule "holdsAt for pow to JoinAsLearner"
	when
		$agent : IPConAgent(  )
		IPConRIC( $revision : revision, $issue : issue, $cluster : cluster )
		not HasRole( agent==$agent, revision==$revision, issue==$issue, cluster==$cluster )
		// Can't join something that is out of date
		not IPConRIC( revision>$revision, issue==$issue, cluster==$cluster )
	then
		logger.trace("Logically toggling JoinPow( " + $agent + " , " + $revision + " , " + $issue + " , " + $cluster + ")");
		JoinAsLearner $join = new JoinAsLearner( $agent, $revision, $issue, $cluster );
		insertLogical( new Power( $agent, $join ) );
end

rule "holdsAt for per to JoinAsLearner"
	when
		Power( $agent : agent, $action : action )
		JoinAsLearner( agent==$agent, $revision : revision, $issue : issue, $cluster : cluster ) from $action
	then
		logger.trace("Logically toggling JoinPer( " + $agent + " , " + $revision + " , " + $issue + " , " + $cluster + ")");
		JoinAsLearner $join = new JoinAsLearner( $agent, $revision, $issue, $cluster );
		insertLogical( new Permission( $agent, $join ) );
end



query "getPowers" (IPConAgent $agent)
	Power( agent==$agent, $action : action )
end

query "getPermissions" (IPConAgent $agent)
	Permission( agent==$agent, $action : action )
end

// DO NOT USE WITH EMPTY ACTIONNAME !
query "getPowersActions"( IPConAgent $agent, String $actionName )
	$power : Power( agent==$agent, $action : action, ($action.toString()).substring(0,$actionName.length()).equals($actionName) )
end

// DO NOT USE WITH EMPTY ACTIONNAME !
query "getPermissionsActions"( IPConAgent $agent, String $actionName )
	$permission : Permission( agent==$agent, $action : action, ($action.toString()).substring(0,$actionName.length()).equals($actionName) )
end


